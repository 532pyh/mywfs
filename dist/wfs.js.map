{
  "version": 3,
  "sources": [
    "node_modules\\browser-pack\\_prelude.js",
    "node_modules\\events\\events.js",
    "src\\controller\\buffer-controller.js",
    "src\\controller\\flow-controller.js",
    "src\\demux\\exp-golomb.js",
    "src\\demux\\h264-demuxer.js",
    "src\\errors.js",
    "src\\event-handler.js",
    "src\\events.js",
    "src\\helper\\aac.js",
    "src\\index.js",
    "src\\loader\\websocket-loader.js",
    "src\\remux\\mp4-generator.js",
    "src\\remux\\mp4-remuxer.js",
    "src\\utils\\h264-nal-slicesreader.js",
    "src\\utils\\logger.js",
    "src\\utils\\polyfill.js",
    "src\\utils\\xhr-loader.js",
    "src\\wfs.js"
  ],
  "names": [],
  "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()",
    "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n",
    "/*\r\n * Buffer Controller\r\n*/\r\n\r\nimport Event from '../events';\r\nimport EventHandler from '../event-handler';\r\n\r\nclass BufferController extends EventHandler {\r\n\r\n    constructor(wfs) {\r\n        super(wfs,\r\n            Event.MEDIA_ATTACHING,\r\n            Event.BUFFER_APPENDING,\r\n            Event.BUFFER_RESET\r\n        );\r\n\r\n        this.mediaSource = null;\r\n        this.media = null;\r\n        this.pendingTracks = {};\r\n        this.sourceBuffer = {};\r\n        this.segments = [];\r\n\r\n        this.appended = 0;\r\n        this._msDuration = null;\r\n\r\n        // Source Buffer listeners\r\n        this.onsbue = this.onSBUpdateEnd.bind(this);\r\n\r\n        this.browserType = 0;\r\n        if (navigator.userAgent.toLowerCase().indexOf('firefox') !== -1) {\r\n            this.browserType = 1;\r\n        }\r\n        this.mediaType = 'H264Raw';\r\n\r\n        this.websocketName = undefined;\r\n        this.websocketDomain = undefined;\r\n        this.channelName = undefined;\r\n    }\r\n\r\n    destroy() {\r\n        EventHandler.prototype.destroy.call(this);\r\n    }\r\n\r\n    onMediaAttaching(data) {\r\n        let media = this.media = data.media;\r\n        this.mediaType = data.mediaType;\r\n        this.websocketName = data.websocketName;\r\n        this.websocketDomain = data.websocketDomain;\r\n        this.channelName = data.channelName;\r\n        if (media) {\r\n            // setup the media source\r\n            var ms = this.mediaSource = new MediaSource();\r\n            //Media Source listeners\r\n            this.onmso = this.onMediaSourceOpen.bind(this);\r\n            this.onmse = this.onMediaSourceEnded.bind(this);\r\n            this.onmsc = this.onMediaSourceClose.bind(this);\r\n            ms.addEventListener('sourceopen', this.onmso);\r\n            ms.addEventListener('sourceended', this.onmse);\r\n            ms.addEventListener('sourceclose', this.onmsc);\r\n            // link video and media Source\r\n            media.src = URL.createObjectURL(ms);\r\n        }\r\n    }\r\n\r\n    onMediaDetaching() {\r\n\r\n    }\r\n\r\n    onBufferAppending(data) {\r\n        if (!this.segments) {\r\n            this.segments = [data];\r\n        } else {\r\n            this.segments.push(data);\r\n        }\r\n        this.doAppending();\r\n    }\r\n\r\n    onMediaSourceClose() {\r\n        console.log('media source closed');\r\n    }\r\n\r\n    onMediaSourceEnded() {\r\n        console.log('media source ended');\r\n    }\r\n\r\n    onSBUpdateEnd(event) {\r\n        // Firefox\r\n        if (this.browserType === 1) {\r\n            this.mediaSource.endOfStream();\r\n            this.media.play();\r\n        }\r\n\r\n        this.appending = false;\r\n        this.doAppending();\r\n        this.updateMediaElementDuration();\r\n\r\n    }\r\n\r\n    updateMediaElementDuration() {\r\n\r\n    }\r\n\r\n    onMediaSourceOpen() {\r\n        let mediaSource = this.mediaSource;\r\n        if (mediaSource) {\r\n            // once received, don't listen anymore to sourceopen event\r\n            mediaSource.removeEventListener('sourceopen', this.onmso);\r\n        }\r\n\r\n        if (this.mediaType === 'FMp4') {\r\n            this.checkPendingTracks();\r\n        }\r\n\r\n        this.wfs.trigger(Event.MEDIA_ATTACHED, { media: this.media, channelName: this.channelName, mediaType: this.mediaType, websocketName: this.websocketName, websocketDomain: this.websocketDomain });\r\n    }\r\n\r\n    checkPendingTracks() {\r\n        this.createSourceBuffers({ tracks: 'video', mimeType: '' });\r\n        this.pendingTracks = {};\r\n    }\r\n\r\n    onBufferReset(data) {\r\n        if (this.mediaType === 'H264Raw') {\r\n            this.createSourceBuffers({ tracks: 'video', mimeType: data.mimeType });\r\n        }\r\n    }\r\n\r\n    createSourceBuffers(tracks) {\r\n        var sourceBuffer = this.sourceBuffer, mediaSource = this.mediaSource;\r\n        let mimeType;\r\n        if (tracks.mimeType === '') {\r\n            mimeType = 'video/mp4;codecs=avc1.420028'; // avc1.42c01f avc1.42801e avc1.640028 avc1.420028\r\n        } else {\r\n            mimeType = 'video/mp4;codecs=' + tracks.mimeType;\r\n        }\r\n\r\n        try {\r\n            let sb = sourceBuffer['video'] = mediaSource.addSourceBuffer(mimeType);\r\n            sb.addEventListener('updateend', this.onsbue);\r\n            track.buffer = sb;\r\n        } catch (err) {\r\n\r\n        }\r\n        this.wfs.trigger(Event.BUFFER_CREATED, { tracks: tracks });\r\n        this.media.play();\r\n    }\r\n\r\n    doAppending() {\r\n\r\n        var wfs = this.wfs, sourceBuffer = this.sourceBuffer, segments = this.segments;\r\n        if (Object.keys(sourceBuffer).length) {\r\n\r\n            if (this.media.error) {\r\n                this.segments = [];\r\n                console.log('trying to append although a media error occured, flush segment and abort');\r\n                return;\r\n            }\r\n            if (this.appending) {\r\n                return;\r\n            }\r\n\r\n            if (segments && segments.length) {\r\n                var segment = segments.shift();\r\n                try {\r\n                    if (sourceBuffer[segment.type]) {\r\n                        this.parent = segment.parent;\r\n                        sourceBuffer[segment.type].appendBuffer(segment.data);\r\n                        this.appendError = 0;\r\n                        this.appended++;\r\n                        this.appending = true;\r\n                    } else {\r\n\r\n                    }\r\n                } catch (err) {\r\n                    // in case any error occured while appending, put back segment in segments table \r\n                    segments.unshift(segment);\r\n                    var event = { type: ErrorTypes.MEDIA_ERROR };\r\n                    if (err.code !== 22) {\r\n                        if (this.appendError) {\r\n                            this.appendError++;\r\n                        } else {\r\n                            this.appendError = 1;\r\n                        }\r\n                        event.details = ErrorDetails.BUFFER_APPEND_ERROR;\r\n                        event.frag = this.fragCurrent;\r\n                        if (this.appendError > wfs.config.appendErrorMaxRetry) {\r\n                            segments = [];\r\n                            event.fatal = true;\r\n                            return;\r\n                        } else {\r\n                            event.fatal = false;\r\n                        }\r\n                    } else {\r\n                        this.segments = [];\r\n                        event.details = ErrorDetails.BUFFER_FULL_ERROR;\r\n                        return;\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default BufferController;\r\n",
    "/*\r\n * Flow Controller\r\n*/\r\n\r\nimport Event from '../events';\r\nimport EventHandler from '../event-handler';\r\n\r\nclass FlowController extends EventHandler {\r\n\r\n    constructor(wfs) {\r\n        super(wfs,\r\n            Event.MEDIA_ATTACHED,\r\n            Event.BUFFER_CREATED,\r\n            Event.FILE_PARSING_DATA,\r\n            Event.FILE_HEAD_LOADED,\r\n            Event.FILE_DATA_LOADED,\r\n            Event.WEBSOCKET_ATTACHED,\r\n            Event.FRAG_PARSING_DATA,\r\n            Event.FRAG_PARSING_INIT_SEGMENT);\r\n\r\n        this.fileStart = 0;\r\n        this.fileEnd = 0;\r\n        this.pendingAppending = 0;\r\n        this.mediaType = undefined;\r\n        channelName: this.channelName;\r\n    }\r\n\r\n    destroy() {\r\n        EventHandler.prototype.destroy.call(this);\r\n    }\r\n\r\n    onMediaAttached(data) {\r\n        if (data.websocketName != undefined) {\r\n            var client = new WebSocket('ws://' + data.websocketDomain + '/' + data.websocketName);\r\n            this.wfs.attachWebsocket(client, data.channelName);\r\n        } else {\r\n            console.log('websocketName ERROE!!!');\r\n        }\r\n\r\n    }\r\n\r\n    onBufferCreated(data) {\r\n        this.mediaType = data.mediaType;\r\n    }\r\n\r\n    onFileHeadLoaded(data) {\r\n    }\r\n\r\n    onFileDataLoaded(data) {\r\n    }\r\n\r\n    onFileParsingData(data) {\r\n    }\r\n\r\n    onWebsocketAttached(data) {\r\n        this.wfs.trigger(Event.BUFFER_APPENDING, { type: 'video', data: data.payload, parent: 'main' });\r\n    }\r\n\r\n    onFragParsingInitSegment(data) {\r\n        var tracks = data.tracks, trackName, track;\r\n\r\n        track = tracks.video;\r\n        if (track) {\r\n            track.id = data.id;\r\n        }\r\n\r\n        for (trackName in tracks) {\r\n            track = tracks[trackName];\r\n            var initSegment = track.initSegment;\r\n            if (initSegment) {\r\n                this.pendingAppending++;\r\n                this.wfs.trigger(Event.BUFFER_APPENDING, { type: trackName, data: initSegment, parent: 'main' });\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    onFragParsingData(data) {\r\n\r\n        if (data.type === 'video') {\r\n\r\n        }\r\n\r\n        [data.data1, data.data2].forEach(buffer => {\r\n            if (buffer) {\r\n                this.pendingAppending++;\r\n                this.wfs.trigger(Event.BUFFER_APPENDING, { type: data.type, data: buffer, parent: 'main' });\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n}\r\nexport default FlowController;  ",
    "/**\r\n * Parser for exponential Golomb codes, a variable-bitwidth number encoding scheme used by h264.\r\n*/\r\n\r\nimport { logger } from '../utils/logger';\r\n\r\nclass ExpGolomb {\r\n\r\n    constructor(data) {\r\n        this.data = data;\r\n        // the number of bytes left to examine in this.data\r\n        this.bytesAvailable = this.data.byteLength;\r\n        // the current word being examined\r\n        this.word = 0; // :uint\r\n        // the number of bits left to examine in the current word\r\n        this.bitsAvailable = 0; // :uint\r\n    }\r\n\r\n    // ():void\r\n    loadWord() {\r\n        var\r\n            position = this.data.byteLength - this.bytesAvailable,\r\n            workingBytes = new Uint8Array(4),\r\n            availableBytes = Math.min(4, this.bytesAvailable);\r\n        if (availableBytes === 0) {\r\n            throw new Error('no bytes available');\r\n        }\r\n        workingBytes.set(this.data.subarray(position, position + availableBytes));\r\n        this.word = new DataView(workingBytes.buffer).getUint32(0);\r\n        // track the amount of this.data that has been processed\r\n        this.bitsAvailable = availableBytes * 8;\r\n        this.bytesAvailable -= availableBytes;\r\n    }\r\n\r\n    // (count:int):void\r\n    skipBits(count) {\r\n        var skipBytes; // :int\r\n        if (this.bitsAvailable > count) {\r\n            this.word <<= count;\r\n            this.bitsAvailable -= count;\r\n        } else {\r\n            count -= this.bitsAvailable;\r\n            skipBytes = count >> 3;\r\n            count -= (skipBytes >> 3);\r\n            this.bytesAvailable -= skipBytes;\r\n            this.loadWord();\r\n            this.word <<= count;\r\n            this.bitsAvailable -= count;\r\n        }\r\n    }\r\n\r\n    // (size:int):uint\r\n    readBits(size) {\r\n        var\r\n            bits = Math.min(this.bitsAvailable, size), // :uint\r\n            valu = this.word >>> (32 - bits); // :uint\r\n        if (size > 32) {\r\n            logger.error('Cannot read more than 32 bits at a time');\r\n        }\r\n        this.bitsAvailable -= bits;\r\n        if (this.bitsAvailable > 0) {\r\n            this.word <<= bits;\r\n        } else if (this.bytesAvailable > 0) {\r\n            this.loadWord();\r\n        }\r\n        bits = size - bits;\r\n        if (bits > 0) {\r\n            return valu << bits | this.readBits(bits);\r\n        } else {\r\n            return valu;\r\n        }\r\n    }\r\n\r\n    // ():uint\r\n    skipLZ() {\r\n        var leadingZeroCount; // :uint\r\n        for (leadingZeroCount = 0; leadingZeroCount < this.bitsAvailable; ++leadingZeroCount) {\r\n            if (0 !== (this.word & (0x80000000 >>> leadingZeroCount))) {\r\n                // the first bit of working word is 1\r\n                this.word <<= leadingZeroCount;\r\n                this.bitsAvailable -= leadingZeroCount;\r\n                return leadingZeroCount;\r\n            }\r\n        }\r\n        // we exhausted word and still have not found a 1\r\n        this.loadWord();\r\n        return leadingZeroCount + this.skipLZ();\r\n    }\r\n\r\n    // ():void\r\n    skipUEG() {\r\n        this.skipBits(1 + this.skipLZ());\r\n    }\r\n\r\n    // ():void\r\n    skipEG() {\r\n        this.skipBits(1 + this.skipLZ());\r\n    }\r\n\r\n    // ():uint\r\n    readUEG() {\r\n        var clz = this.skipLZ(); // :uint\r\n        return this.readBits(clz + 1) - 1;\r\n    }\r\n\r\n    // ():int\r\n    readEG() {\r\n        var valu = this.readUEG(); // :int\r\n        if (0x01 & valu) {\r\n            // the number is odd if the low order bit is set\r\n            return (1 + valu) >>> 1; // add 1 to make it even, and divide by 2\r\n        } else {\r\n            return -1 * (valu >>> 1); // divide by two then make it negative\r\n        }\r\n    }\r\n\r\n    // Some convenience functions\r\n    // :Boolean\r\n    readBoolean() {\r\n        return 1 === this.readBits(1);\r\n    }\r\n\r\n    // ():int\r\n    readUByte() {\r\n        return this.readBits(8);\r\n    }\r\n\r\n    // ():int\r\n    readUShort() {\r\n        return this.readBits(16);\r\n    }\r\n    // ():int\r\n    readUInt() {\r\n        return this.readBits(32);\r\n    }\r\n\r\n    /**\r\n     * Advance the ExpGolomb decoder past a scaling list. The scaling\r\n     * list is optionally transmitted as part of a sequence parameter\r\n     * set and is not relevant to transmuxing.\r\n     * @param count {number} the number of entries in this scaling list\r\n     * @see Recommendation ITU-T H.264, Section 7.3.2.1.1.1\r\n     */\r\n    skipScalingList(count) {\r\n        var\r\n            lastScale = 8,\r\n            nextScale = 8,\r\n            j,\r\n            deltaScale;\r\n        for (j = 0; j < count; j++) {\r\n            if (nextScale !== 0) {\r\n                deltaScale = this.readEG();\r\n                nextScale = (lastScale + deltaScale + 256) % 256;\r\n            }\r\n            lastScale = (nextScale === 0) ? lastScale : nextScale;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Read a sequence parameter set and return some interesting video\r\n     * properties. A sequence parameter set is the H264 metadata that\r\n     * describes the properties of upcoming video frames.\r\n     * @param data {Uint8Array} the bytes of a sequence parameter set\r\n     * @return {object} an object with configuration parsed from the\r\n     * sequence parameter set, including the dimensions of the\r\n     * associated video frames.\r\n     */\r\n    readSPS() {\r\n        var\r\n            frameCropLeftOffset = 0,\r\n            frameCropRightOffset = 0,\r\n            frameCropTopOffset = 0,\r\n            frameCropBottomOffset = 0,\r\n            sarScale = 1,\r\n            profileIdc, profileCompat, levelIdc,\r\n            numRefFramesInPicOrderCntCycle, picWidthInMbsMinus1,\r\n            picHeightInMapUnitsMinus1,\r\n            frameMbsOnlyFlag,\r\n            scalingListCount,\r\n            i;\r\n        this.readUByte();\r\n        profileIdc = this.readUByte(); // profile_idc\r\n        profileCompat = this.readBits(5); // constraint_set[0-4]_flag, u(5)\r\n        this.skipBits(3); // reserved_zero_3bits u(3),\r\n        levelIdc = this.readUByte(); //level_idc u(8)\r\n        this.skipUEG(); // seq_parameter_set_id\r\n        // some profiles have more optional data we don't need\r\n        if (profileIdc === 100 ||\r\n            profileIdc === 110 ||\r\n            profileIdc === 122 ||\r\n            profileIdc === 244 ||\r\n            profileIdc === 44 ||\r\n            profileIdc === 83 ||\r\n            profileIdc === 86 ||\r\n            profileIdc === 118 ||\r\n            profileIdc === 128) {\r\n            var chromaFormatIdc = this.readUEG();\r\n            if (chromaFormatIdc === 3) {\r\n                this.skipBits(1); // separate_colour_plane_flag\r\n            }\r\n            this.skipUEG(); // bit_depth_luma_minus8\r\n            this.skipUEG(); // bit_depth_chroma_minus8\r\n            this.skipBits(1); // qpprime_y_zero_transform_bypass_flag\r\n            if (this.readBoolean()) { // seq_scaling_matrix_present_flag\r\n                scalingListCount = (chromaFormatIdc !== 3) ? 8 : 12;\r\n                for (i = 0; i < scalingListCount; i++) {\r\n                    if (this.readBoolean()) { // seq_scaling_list_present_flag[ i ]\r\n                        if (i < 6) {\r\n                            this.skipScalingList(16);\r\n                        } else {\r\n                            this.skipScalingList(64);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.skipUEG(); // log2_max_frame_num_minus4\r\n        var picOrderCntType = this.readUEG();\r\n        if (picOrderCntType === 0) {\r\n            this.readUEG(); //log2_max_pic_order_cnt_lsb_minus4\r\n        } else if (picOrderCntType === 1) {\r\n            this.skipBits(1); // delta_pic_order_always_zero_flag\r\n            this.skipEG(); // offset_for_non_ref_pic\r\n            this.skipEG(); // offset_for_top_to_bottom_field\r\n            numRefFramesInPicOrderCntCycle = this.readUEG();\r\n            for (i = 0; i < numRefFramesInPicOrderCntCycle; i++) {\r\n                this.skipEG(); // offset_for_ref_frame[ i ]\r\n            }\r\n        }\r\n        this.skipUEG(); // max_num_ref_frames\r\n        this.skipBits(1); // gaps_in_frame_num_value_allowed_flag\r\n        picWidthInMbsMinus1 = this.readUEG();\r\n        picHeightInMapUnitsMinus1 = this.readUEG();\r\n        frameMbsOnlyFlag = this.readBits(1);\r\n        if (frameMbsOnlyFlag === 0) {\r\n            this.skipBits(1); // mb_adaptive_frame_field_flag\r\n        }\r\n        this.skipBits(1); // direct_8x8_inference_flag\r\n        if (this.readBoolean()) { // frame_cropping_flag\r\n            frameCropLeftOffset = this.readUEG();\r\n            frameCropRightOffset = this.readUEG();\r\n            frameCropTopOffset = this.readUEG();\r\n            frameCropBottomOffset = this.readUEG();\r\n        }\r\n        if (this.readBoolean()) {\r\n            // vui_parameters_present_flag\r\n            if (this.readBoolean()) {\r\n                // aspect_ratio_info_present_flag\r\n                let sarRatio;\r\n                const aspectRatioIdc = this.readUByte();\r\n                switch (aspectRatioIdc) {\r\n                    case 1: sarRatio = [1, 1]; break;\r\n                    case 2: sarRatio = [12, 11]; break;\r\n                    case 3: sarRatio = [10, 11]; break;\r\n                    case 4: sarRatio = [16, 11]; break;\r\n                    case 5: sarRatio = [40, 33]; break;\r\n                    case 6: sarRatio = [24, 11]; break;\r\n                    case 7: sarRatio = [20, 11]; break;\r\n                    case 8: sarRatio = [32, 11]; break;\r\n                    case 9: sarRatio = [80, 33]; break;\r\n                    case 10: sarRatio = [18, 11]; break;\r\n                    case 11: sarRatio = [15, 11]; break;\r\n                    case 12: sarRatio = [64, 33]; break;\r\n                    case 13: sarRatio = [160, 99]; break;\r\n                    case 14: sarRatio = [4, 3]; break;\r\n                    case 15: sarRatio = [3, 2]; break;\r\n                    case 16: sarRatio = [2, 1]; break;\r\n                    case 255: {\r\n                        sarRatio = [this.readUByte() << 8 | this.readUByte(), this.readUByte() << 8 | this.readUByte()];\r\n                        break;\r\n                    }\r\n                }\r\n                if (sarRatio) {\r\n                    sarScale = sarRatio[0] / sarRatio[1];\r\n                }\r\n            }\r\n        }\r\n        return {\r\n            width: Math.ceil((((picWidthInMbsMinus1 + 1) * 16) - frameCropLeftOffset * 2 - frameCropRightOffset * 2) * sarScale),\r\n            height: ((2 - frameMbsOnlyFlag) * (picHeightInMapUnitsMinus1 + 1) * 16) - ((frameMbsOnlyFlag ? 2 : 4) * (frameCropTopOffset + frameCropBottomOffset))\r\n        };\r\n    }\r\n\r\n    readSliceType() {\r\n        // skip NALu type\r\n        this.readUByte();\r\n        // discard first_mb_in_slice\r\n        this.readUEG();\r\n        // return slice_type\r\n        return this.readUEG();\r\n    }\r\n}\r\n\r\nexport default ExpGolomb;\r\n",
    "/**\r\n\r\n*/\r\nimport Event from '../events';\r\nimport ExpGolomb from './exp-golomb';\r\nimport EventHandler from '../event-handler';\r\nimport MP4Remuxer from '../remux/mp4-remuxer';\r\n\r\nclass h264Demuxer extends EventHandler {\r\n\r\n    constructor(wfs, config = null) {\r\n        super(wfs,\r\n            Event.H264_DATA_PARSED);\r\n\r\n        this.config = this.wfs.config || config;\r\n        this.wfs = wfs;\r\n        this.id = 'main';\r\n\r\n        this.remuxer = new MP4Remuxer(this.wfs, this.id, this.config);\r\n        this.contiguous = true;\r\n        this.timeOffset = 1;\r\n        this.sn = 0;\r\n        this.TIMESCALE = 90000;\r\n        this.timestamp = 0;\r\n        this.scaleFactor = this.TIMESCALE / 1000;\r\n        this.H264_TIMEBASE = 3000;\r\n        this._avcTrack = {\r\n            container: 'video/mp2t', type: 'video', id: 1, sequenceNumber: 0,\r\n            samples: [], len: 0, nbNalu: 0, dropped: 0, count: 0\r\n        };\r\n        this.browserType = 0;\r\n        if (navigator.userAgent.toLowerCase().indexOf('firefox') !== -1) {\r\n            this.browserType = 1;\r\n        }\r\n    }\r\n\r\n    destroy() {\r\n        EventHandler.prototype.destroy.call(this);\r\n    }\r\n\r\n    getTimestampM() {\r\n        this.timestamp += this.H264_TIMEBASE;\r\n        return this.timestamp;\r\n    }\r\n\r\n    onH264DataParsed(event) {\r\n        this._parseAVCTrack(event.data);\r\n        if (this.browserType === 1 || this._avcTrack.samples.length > 0) { // Firefox\r\n            this.remuxer.pushVideo(0, this.sn, this._avcTrack, this.timeOffset, this.contiguous);\r\n            this.sn += 1;\r\n        }\r\n    }\r\n\r\n    _parseAVCTrack(array) {\r\n        var track = this._avcTrack,\r\n            samples = track.samples,\r\n            units = this._parseAVCNALu(array),\r\n            units2 = [],\r\n            debug = false,\r\n            key = false,\r\n            length = 0,\r\n            expGolombDecoder,\r\n            avcSample,\r\n            push,\r\n            i;\r\n        var debugString = '';\r\n        var pushAccesUnit = function () {\r\n            if (units2.length) {\r\n                if (!this.config.forceKeyFrameOnDiscontinuity ||\r\n                    key === true ||\r\n                    (track.sps && (samples.length || this.contiguous))) {\r\n                    var tss = this.getTimestampM();\r\n                    avcSample = { units: { units: units2, length: length }, pts: tss, dts: tss, key: key };\r\n                    samples.push(avcSample);\r\n                    track.len += length;\r\n                    track.nbNalu += units2.length;\r\n                } else {\r\n                    track.dropped++;\r\n                }\r\n                units2 = [];\r\n                length = 0;\r\n            }\r\n        }.bind(this);\r\n\r\n        units.forEach(unit => {\r\n            switch (unit.type) {\r\n                //NDR\r\n                case 1:\r\n                    push = true;\r\n                    if (debug) {\r\n                        debugString += 'NDR ';\r\n                    }\r\n                    break;\r\n                //IDR\r\n                case 5:\r\n                    push = true;\r\n                    if (debug) {\r\n                        debugString += 'IDR ';\r\n                    }\r\n                    key = true;\r\n                    break;\r\n                //SEI\r\n                case 6:\r\n                    unit.data = this.discardEPB(unit.data);\r\n                    expGolombDecoder = new ExpGolomb(unit.data);\r\n                    // skip frameType\r\n                    expGolombDecoder.readUByte();\r\n                    break;\r\n                //SPS\r\n                case 7:\r\n                    push = false;\r\n                    if (debug) {\r\n                        debugString += 'SPS ';\r\n                    }\r\n                    if (!track.sps) {\r\n                        expGolombDecoder = new ExpGolomb(unit.data);\r\n                        var config = expGolombDecoder.readSPS();\r\n                        track.width = config.width;\r\n                        track.height = config.height;\r\n                        track.sps = [unit.data];\r\n                        track.duration = 0;\r\n                        var codecarray = unit.data.subarray(1, 4);\r\n                        var codecstring = 'avc1.';\r\n                        for (i = 0; i < 3; i++) {\r\n                            var h = codecarray[i].toString(16);\r\n                            if (h.length < 2) {\r\n                                h = '0' + h;\r\n                            }\r\n                            codecstring += h;\r\n                        }\r\n                        track.codec = codecstring;\r\n                        this.wfs.trigger(Event.BUFFER_RESET, { mimeType: track.codec });\r\n                        push = true;\r\n                    }\r\n                    break;\r\n                //PPS\r\n                case 8:\r\n                    push = false;\r\n                    if (debug) {\r\n                        debugString += 'PPS ';\r\n                    }\r\n                    if (!track.pps) {\r\n                        track.pps = [unit.data];\r\n                        push = true;\r\n                    }\r\n                    break;\r\n                case 9:\r\n                    push = false;\r\n                    if (debug) {\r\n                        debugString += 'AUD ';\r\n                    }\r\n                    pushAccesUnit();\r\n                    break;\r\n                default:\r\n                    push = false;\r\n                    debugString += 'unknown NAL ' + unit.type + ' ';\r\n                    break;\r\n            }\r\n\r\n            if (push) {\r\n                units2.push(unit);\r\n                length += unit.data.byteLength;\r\n            }\r\n\r\n        });\r\n\r\n        if (debug || debugString.length) {\r\n            logger.log(debugString);\r\n        }\r\n\r\n        pushAccesUnit();\r\n\r\n    }\r\n\r\n    _parseAVCNALu(array) {\r\n        var i = 0, len = array.byteLength, value, overflow, state = 0; //state = this.avcNaluState;\r\n        var units = [], unit, unitType, lastUnitStart, lastUnitType;\r\n        while (i < len) {\r\n            value = array[i++];\r\n            // finding 3 or 4-byte start codes (00 00 01 OR 00 00 00 01)\r\n            switch (state) {\r\n                case 0:\r\n                    if (value === 0) {\r\n                        state = 1;\r\n                    }\r\n                    break;\r\n                case 1:\r\n                    if (value === 0) {\r\n                        state = 2;\r\n                    } else {\r\n                        state = 0;\r\n                    }\r\n                    break;\r\n                case 2:\r\n                case 3:\r\n                    if (value === 0) {\r\n                        state = 3;\r\n                    } else if (value === 1 && i < len) {\r\n                        unitType = array[i] & 0x1f;\r\n                        if (lastUnitStart) {\r\n                            unit = { data: array.subarray(lastUnitStart, i - state - 1), type: lastUnitType };\r\n                            units.push(unit);\r\n                        } else {\r\n                        }\r\n                        lastUnitStart = i;\r\n                        lastUnitType = unitType;\r\n                        state = 0;\r\n                    } else {\r\n                        state = 0;\r\n                    }\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (lastUnitStart) {\r\n            unit = { data: array.subarray(lastUnitStart, len), type: lastUnitType, state: state };\r\n            units.push(unit);\r\n        }\r\n\r\n        return units;\r\n    }\r\n\r\n    /**\r\n     * remove Emulation Prevention bytes from a RBSP\r\n     */\r\n    discardEPB(data) {\r\n        var length = data.byteLength,\r\n            EPBPositions = [],\r\n            i = 1,\r\n            newLength, newData;\r\n        // Find all `Emulation Prevention Bytes`\r\n        while (i < length - 2) {\r\n            if (data[i] === 0 &&\r\n                data[i + 1] === 0 &&\r\n                data[i + 2] === 0x03) {\r\n                EPBPositions.push(i + 2);\r\n                i += 2;\r\n            } else {\r\n                i++;\r\n            }\r\n        }\r\n        // If no Emulation Prevention Bytes were found just return the original\r\n        // array\r\n        if (EPBPositions.length === 0) {\r\n            return data;\r\n        }\r\n        // Create a new array to hold the NAL unit data\r\n        newLength = length - EPBPositions.length;\r\n        newData = new Uint8Array(newLength);\r\n        var sourceIndex = 0;\r\n\r\n        for (i = 0; i < newLength; sourceIndex++ , i++) {\r\n            if (sourceIndex === EPBPositions[0]) {\r\n                // Skip this byte\r\n                sourceIndex++;\r\n                // Remove this position index\r\n                EPBPositions.shift();\r\n            }\r\n            newData[i] = data[sourceIndex];\r\n        }\r\n        return newData;\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default h264Demuxer;\r\n\r\n",
    "export const ErrorTypes = {\r\n    // Identifier for a network error (loading error / timeout ...)\r\n    NETWORK_ERROR: 'networkError',\r\n    // Identifier for a media Error (video/parsing/mediasource error)\r\n    MEDIA_ERROR: 'mediaError',\r\n    // Identifier for all other errors\r\n    OTHER_ERROR: 'otherError'\r\n};\r\n\r\nexport const ErrorDetails = {\r\n    // Identifier for a manifest load error - data: { url : faulty URL, response : { code: error code, text: error text }}\r\n    MANIFEST_LOAD_ERROR: 'manifestLoadError',\r\n    // Identifier for a manifest load timeout - data: { url : faulty URL, response : { code: error code, text: error text }}\r\n    MANIFEST_LOAD_TIMEOUT: 'manifestLoadTimeOut',\r\n    // Identifier for a manifest parsing error - data: { url : faulty URL, reason : error reason}\r\n    MANIFEST_PARSING_ERROR: 'manifestParsingError',\r\n    // Identifier for a manifest with only incompatible codecs error - data: { url : faulty URL, reason : error reason}\r\n    MANIFEST_INCOMPATIBLE_CODECS_ERROR: 'manifestIncompatibleCodecsError',\r\n    // Identifier for a level load error - data: { url : faulty URL, response : { code: error code, text: error text }}\r\n    LEVEL_LOAD_ERROR: 'levelLoadError',\r\n    // Identifier for a level load timeout - data: { url : faulty URL, response : { code: error code, text: error text }}\r\n    LEVEL_LOAD_TIMEOUT: 'levelLoadTimeOut',\r\n    // Identifier for a level switch error - data: { level : faulty level Id, event : error description}\r\n    LEVEL_SWITCH_ERROR: 'levelSwitchError',\r\n    // Identifier for an audio track load error - data: { url : faulty URL, response : { code: error code, text: error text }}\r\n    AUDIO_TRACK_LOAD_ERROR: 'audioTrackLoadError',\r\n    // Identifier for an audio track load timeout - data: { url : faulty URL, response : { code: error code, text: error text }}\r\n    AUDIO_TRACK_LOAD_TIMEOUT: 'audioTrackLoadTimeOut',\r\n    // Identifier for fragment load error - data: { frag : fragment object, response : { code: error code, text: error text }}\r\n    FRAG_LOAD_ERROR: 'fragLoadError',\r\n    // Identifier for fragment loop loading error - data: { frag : fragment object}\r\n    FRAG_LOOP_LOADING_ERROR: 'fragLoopLoadingError',\r\n    // Identifier for fragment load timeout error - data: { frag : fragment object}\r\n    FRAG_LOAD_TIMEOUT: 'fragLoadTimeOut',\r\n    // Identifier for a fragment decryption error event - data: parsing error description\r\n    FRAG_DECRYPT_ERROR: 'fragDecryptError',\r\n    // Identifier for a fragment parsing error event - data: parsing error description\r\n    FRAG_PARSING_ERROR: 'fragParsingError',\r\n    // Identifier for decrypt key load error - data: { frag : fragment object, response : { code: error code, text: error text }}\r\n    KEY_LOAD_ERROR: 'keyLoadError',\r\n    // Identifier for decrypt key load timeout error - data: { frag : fragment object}\r\n    KEY_LOAD_TIMEOUT: 'keyLoadTimeOut',\r\n    // Triggered when an exception occurs while adding a sourceBuffer to MediaSource - data : {  err : exception , mimeType : mimeType }\r\n    BUFFER_ADD_CODEC_ERROR: 'bufferAddCodecError',\r\n    // Identifier for a buffer append error - data: append error description\r\n    BUFFER_APPEND_ERROR: 'bufferAppendError',\r\n    // Identifier for a buffer appending error event - data: appending error description\r\n    BUFFER_APPENDING_ERROR: 'bufferAppendingError',\r\n    // Identifier for a buffer stalled error event\r\n    BUFFER_STALLED_ERROR: 'bufferStalledError',\r\n    // Identifier for a buffer full event\r\n    BUFFER_FULL_ERROR: 'bufferFullError',\r\n    // Identifier for a buffer seek over hole event\r\n    BUFFER_SEEK_OVER_HOLE: 'bufferSeekOverHole',\r\n    // Identifier for an internal exception happening inside hls.js while handling an event\r\n    INTERNAL_EXCEPTION: 'internalException'\r\n};\r\n",
    "/*\r\n*\r\n* All objects in the event handling chain should inherit from this class\r\n*\r\n*/\r\nimport Event from './events';\r\n\r\nclass EventHandler {\r\n\r\n    constructor(wfs, ...events) {\r\n        this.wfs = wfs;\r\n        this.onEvent = this.onEvent.bind(this);\r\n        this.handledEvents = events;\r\n        this.useGenericHandler = true;\r\n\r\n        this.registerListeners();\r\n    }\r\n\r\n    destroy() {\r\n        this.unregisterListeners();\r\n    }\r\n\r\n    isEventHandler() {\r\n        return typeof this.handledEvents === 'object' && this.handledEvents.length && typeof this.onEvent === 'function';\r\n    }\r\n\r\n    registerListeners() {\r\n        if (this.isEventHandler()) {\r\n            this.handledEvents.forEach(function (event) {\r\n                if (event === 'wfsEventGeneric') {\r\n                    //throw new Error('Forbidden event name: ' + event);\r\n                }\r\n                this.wfs.on(event, this.onEvent);\r\n            }.bind(this));\r\n        }\r\n    }\r\n\r\n    unregisterListeners() {\r\n        if (this.isEventHandler()) {\r\n            this.handledEvents.forEach(function (event) {\r\n                this.wfs.off(event, this.onEvent);\r\n            }.bind(this));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * arguments: event (string), data (any)\r\n     */\r\n    onEvent(event, data) {\r\n        this.onEventGeneric(event, data);\r\n    }\r\n\r\n    onEventGeneric(event, data) {\r\n        var eventToFunction = function (event, data) {\r\n            var funcName = 'on' + event.replace('wfs', '');\r\n            if (typeof this[funcName] !== 'function') {\r\n                //throw new Error(`Event ${event} has no generic handler in this ${this.constructor.name} class (tried ${funcName})`);\r\n            }\r\n            return this[funcName].bind(this, data);\r\n        };\r\n        try {\r\n            eventToFunction.call(this, event, data).call();\r\n        } catch (err) {\r\n            console.log(`internal error happened while processing ${event}:${err.message}`);\r\n            //   this.hls.trigger(Event.ERROR, {type: ErrorTypes.OTHER_ERROR, details: ErrorDetails.INTERNAL_EXCEPTION, fatal: false, event : event, err : err});\r\n        }\r\n    }\r\n}\r\n\r\nexport default EventHandler;\r\n",
    "module.exports = {\r\n\r\n    MEDIA_ATTACHING: 'wfsMediaAttaching',\r\n\r\n    MEDIA_ATTACHED: 'wfsMediaAttached',\r\n\r\n    FRAG_LOADING: 'wfsFragLoading',\r\n\r\n    BUFFER_CREATED: 'wfsBufferCreated',\r\n\r\n    BUFFER_APPENDING: 'wfsBufferAppending',\r\n\r\n    BUFFER_RESET: 'wfsBufferReset',\r\n\r\n    FRAG_PARSING_DATA: 'wfsFragParsingData',\r\n\r\n    FRAG_PARSING_INIT_SEGMENT: 'wfsFragParsingInitSegment',\r\n    //------------------------------------------\r\n    H264_DATA_PARSING: 'wfsH264DataParsing',\r\n\r\n    H264_DATA_PARSED: 'wfsH264DataParsed',\r\n    //------------------------------------------\r\n    WEBSOCKET_ATTACHED: 'wfsWebsocketAttached',\r\n\r\n    WEBSOCKET_ATTACHING: 'wfsWebsocketAttaching',\r\n\r\n    WEBSOCKET_DATA_UPLOADING: 'wfsWebsocketDataUploading',\r\n\r\n    WEBSOCKET_MESSAGE_SENDING: 'wfsWebsocketMessageSending',\r\n    //------------------------------------------\r\n    FILE_HEAD_LOADING: 'wfsFileHeadLoading',\r\n\r\n    FILE_HEAD_LOADED: 'wfsFileHeadLoaded',\r\n\r\n    FILE_DATA_LOADING: 'wfsFileDataLoading',\r\n\r\n    FILE_DATA_LOADED: 'wfsFileDataLoaded',\r\n\r\n    FILE_PARSING_DATA: 'wfsFileParsingData'\r\n    //------------------------------------------\r\n\r\n};\r\n",
    "/**\r\n *  AAC helper\r\n */\r\n\r\nclass AAC {\r\n    static getSilentFrame(channelCount) {\r\n        if (channelCount === 1) {\r\n            return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x23, 0x80]);\r\n        } else if (channelCount === 2) {\r\n            return new Uint8Array([0x21, 0x00, 0x49, 0x90, 0x02, 0x19, 0x00, 0x23, 0x80]);\r\n        } else if (channelCount === 3) {\r\n            return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x8e]);\r\n        } else if (channelCount === 4) {\r\n            return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x80, 0x2c, 0x80, 0x08, 0x02, 0x38]);\r\n        } else if (channelCount === 5) {\r\n            return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x82, 0x30, 0x04, 0x99, 0x00, 0x21, 0x90, 0x02, 0x38]);\r\n        } else if (channelCount === 6) {\r\n            return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x82, 0x30, 0x04, 0x99, 0x00, 0x21, 0x90, 0x02, 0x00, 0xb2, 0x00, 0x20, 0x08, 0xe0]);\r\n        }\r\n        return null;\r\n    }\r\n}\r\n\r\nexport default AAC;\r\n",
    "// This is mostly for support of the es6 module export\r\n// syntax with the babel compiler, it looks like it doesnt support\r\n// function exports like we are used to in node/commonjs\r\nmodule.exports = require('./wfs.js').default;\r\n",
    "/*\r\n * Websocket Loader\r\n*/\r\n\r\nimport Event from '../events';\r\nimport EventHandler from '../event-handler';\r\nimport SlicesReader from '../utils/h264-nal-slicesreader.js';\r\n\r\nclass WebsocketLoader extends EventHandler {\r\n\r\n    constructor(wfs) {\r\n        super(wfs,\r\n            Event.WEBSOCKET_ATTACHING,\r\n            Event.WEBSOCKET_DATA_UPLOADING,\r\n            Event.WEBSOCKET_MESSAGE_SENDING)\r\n        this.buf = null;\r\n        this.slicesReader = new SlicesReader(wfs);\r\n        this.mediaType = undefined;\r\n        this.channelName = undefined;\r\n    }\r\n\r\n    destroy() {\r\n        !!this.client && this.client.close();\r\n        this.slicesReader.destroy();\r\n        EventHandler.prototype.destroy.call(this);\r\n    }\r\n\r\n    onWebsocketAttaching(data) {\r\n        this.mediaType = data.mediaType;\r\n        this.channelName = data.channelName;\r\n        if (data.websocket instanceof WebSocket) {\r\n            this.client = data.websocket;\r\n            this.client.onopen = this.initSocketClient.bind(this);\r\n            this.client.onclose = function (e) {\r\n                console.log('Websocket Disconnected!');\r\n            };\r\n        }\r\n    }\r\n\r\n    initSocketClient(client) {\r\n        this.client.binaryType = 'arraybuffer';\r\n        this.client.onmessage = this.receiveSocketMessage.bind(this);\r\n        this.wfs.trigger(Event.WEBSOCKET_MESSAGE_SENDING, { commandType: \"open\", channelName: this.channelName, commandValue: \"NA\" });\r\n        console.log('Websocket Open!');\r\n    }\r\n\r\n    receiveSocketMessage(event) {\r\n        this.buf = new Uint8Array(event.data);\r\n        var copy = new Uint8Array(this.buf);\r\n\r\n        if (this.mediaType === 'FMp4') {\r\n            this.wfs.trigger(Event.WEBSOCKET_ATTACHED, { payload: copy });\r\n        }\r\n        if (this.mediaType === 'H264Raw') {\r\n            this.wfs.trigger(Event.H264_DATA_PARSING, { data: copy });\r\n        }\r\n    }\r\n\r\n    onWebsocketDataUploading(event) {\r\n        this.client.send(event.data);\r\n    }\r\n\r\n    onWebsocketMessageSending(event) {\r\n        this.client.send(JSON.stringify({ t: event.commandType, c: event.channelName, v: event.commandValue }));\r\n    }\r\n\r\n}\r\n\r\nexport default WebsocketLoader;  ",
    "/**\r\n * Generate MP4 Box\r\n*/\r\n\r\n//import Hex from '../utils/hex';\r\nclass MP4 {\r\n    static init() {\r\n        MP4.types = {\r\n            avc1: [], // codingname\r\n            avcC: [],\r\n            btrt: [],\r\n            dinf: [],\r\n            dref: [],\r\n            esds: [],\r\n            ftyp: [],\r\n            hdlr: [],\r\n            mdat: [],\r\n            mdhd: [],\r\n            mdia: [],\r\n            mfhd: [],\r\n            minf: [],\r\n            moof: [],\r\n            moov: [],\r\n            mp4a: [],\r\n            mvex: [],\r\n            mvhd: [],\r\n            sdtp: [],\r\n            stbl: [],\r\n            stco: [],\r\n            stsc: [],\r\n            stsd: [],\r\n            stsz: [],\r\n            stts: [],\r\n            tfdt: [],\r\n            tfhd: [],\r\n            traf: [],\r\n            trak: [],\r\n            trun: [],\r\n            trex: [],\r\n            tkhd: [],\r\n            vmhd: [],\r\n            smhd: []\r\n        };\r\n\r\n        var i;\r\n        for (i in MP4.types) {\r\n            if (MP4.types.hasOwnProperty(i)) {\r\n                MP4.types[i] = [\r\n                    i.charCodeAt(0),\r\n                    i.charCodeAt(1),\r\n                    i.charCodeAt(2),\r\n                    i.charCodeAt(3)\r\n                ];\r\n            }\r\n        }\r\n\r\n        var videoHdlr = new Uint8Array([\r\n            0x00, // version 0\r\n            0x00, 0x00, 0x00, // flags\r\n            0x00, 0x00, 0x00, 0x00, // pre_defined\r\n            0x76, 0x69, 0x64, 0x65, // handler_type: 'vide'\r\n            0x00, 0x00, 0x00, 0x00, // reserved\r\n            0x00, 0x00, 0x00, 0x00, // reserved\r\n            0x00, 0x00, 0x00, 0x00, // reserved\r\n            0x56, 0x69, 0x64, 0x65,\r\n            0x6f, 0x48, 0x61, 0x6e,\r\n            0x64, 0x6c, 0x65, 0x72, 0x00 // name: 'VideoHandler'\r\n        ]);\r\n\r\n        var audioHdlr = new Uint8Array([\r\n            0x00, // version 0\r\n            0x00, 0x00, 0x00, // flags\r\n            0x00, 0x00, 0x00, 0x00, // pre_defined\r\n            0x73, 0x6f, 0x75, 0x6e, // handler_type: 'soun'\r\n            0x00, 0x00, 0x00, 0x00, // reserved\r\n            0x00, 0x00, 0x00, 0x00, // reserved\r\n            0x00, 0x00, 0x00, 0x00, // reserved\r\n            0x53, 0x6f, 0x75, 0x6e,\r\n            0x64, 0x48, 0x61, 0x6e,\r\n            0x64, 0x6c, 0x65, 0x72, 0x00 // name: 'SoundHandler'\r\n        ]);\r\n\r\n        MP4.HDLR_TYPES = {\r\n            'video': videoHdlr,\r\n            'audio': audioHdlr\r\n        };\r\n\r\n        var dref = new Uint8Array([\r\n            0x00, // version 0\r\n            0x00, 0x00, 0x00, // flags\r\n            0x00, 0x00, 0x00, 0x01, // entry_count\r\n            0x00, 0x00, 0x00, 0x0c, // entry_size\r\n            0x75, 0x72, 0x6c, 0x20, // 'url' type\r\n            0x00, // version 0\r\n            0x00, 0x00, 0x01 // entry_flags\r\n        ]);\r\n\r\n        var stco = new Uint8Array([\r\n            0x00, // version\r\n            0x00, 0x00, 0x00, // flags\r\n            0x00, 0x00, 0x00, 0x00 // entry_count\r\n        ]);\r\n\r\n        MP4.STTS = MP4.STSC = MP4.STCO = stco;\r\n\r\n        MP4.STSZ = new Uint8Array([\r\n            0x00, // version\r\n            0x00, 0x00, 0x00, // flags\r\n            0x00, 0x00, 0x00, 0x00, // sample_size\r\n            0x00, 0x00, 0x00, 0x00, // sample_count\r\n        ]);\r\n        MP4.VMHD = new Uint8Array([\r\n            0x00, // version\r\n            0x00, 0x00, 0x01, // flags\r\n            0x00, 0x00, // graphicsmode\r\n            0x00, 0x00,\r\n            0x00, 0x00,\r\n            0x00, 0x00 // opcolor\r\n        ]);\r\n        MP4.SMHD = new Uint8Array([\r\n            0x00, // version\r\n            0x00, 0x00, 0x00, // flags\r\n            0x00, 0x00, // balance\r\n            0x00, 0x00 // reserved\r\n        ]);\r\n\r\n        MP4.STSD = new Uint8Array([\r\n            0x00, // version 0\r\n            0x00, 0x00, 0x00, // flags\r\n            0x00, 0x00, 0x00, 0x01]);// entry_count\r\n\r\n        var majorBrand = new Uint8Array([105, 115, 111, 109]); // isom\r\n        var avc1Brand = new Uint8Array([97, 118, 99, 49]); // avc1\r\n        var minorVersion = new Uint8Array([0, 0, 0, 1]);\r\n\r\n        MP4.FTYP = MP4.box(MP4.types.ftyp, majorBrand, minorVersion, majorBrand, avc1Brand);\r\n        MP4.DINF = MP4.box(MP4.types.dinf, MP4.box(MP4.types.dref, dref));\r\n    }\r\n\r\n    static box(type) {\r\n        var\r\n            payload = Array.prototype.slice.call(arguments, 1),\r\n            size = 8,\r\n            i = payload.length,\r\n            len = i,\r\n            result;\r\n        // calculate the total size we need to allocate\r\n        while (i--) {\r\n            size += payload[i].byteLength;\r\n        }\r\n        result = new Uint8Array(size);\r\n        result[0] = (size >> 24) & 0xff;\r\n        result[1] = (size >> 16) & 0xff;\r\n        result[2] = (size >> 8) & 0xff;\r\n        result[3] = size & 0xff;\r\n        result.set(type, 4);\r\n        // copy the payload into the result\r\n        for (i = 0, size = 8; i < len; i++) {\r\n            // copy payload[i] array @ offset size\r\n            result.set(payload[i], size);\r\n            size += payload[i].byteLength;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    static hdlr(type) {\r\n        return MP4.box(MP4.types.hdlr, MP4.HDLR_TYPES[type]);\r\n    }\r\n\r\n    static mdat(data) {\r\n        //  console.log( \"mdat==> \",data.length );\r\n        return MP4.box(MP4.types.mdat, data);\r\n    }\r\n\r\n    static mdhd(timescale, duration) {\r\n        duration *= timescale;\r\n        return MP4.box(MP4.types.mdhd, new Uint8Array([\r\n            0x00, // version 0\r\n            0x00, 0x00, 0x00, // flags\r\n            0x00, 0x00, 0x00, 0x02, // creation_time\r\n            0x00, 0x00, 0x00, 0x03, // modification_time\r\n            (timescale >> 24) & 0xFF,\r\n            (timescale >> 16) & 0xFF,\r\n            (timescale >> 8) & 0xFF,\r\n            timescale & 0xFF, // timescale\r\n            (duration >> 24),\r\n            (duration >> 16) & 0xFF,\r\n            (duration >> 8) & 0xFF,\r\n            duration & 0xFF, // duration\r\n            0x55, 0xc4, // 'und' language (undetermined)\r\n            0x00, 0x00\r\n        ]));\r\n    }\r\n\r\n    static mdia(track) {\r\n        return MP4.box(MP4.types.mdia, MP4.mdhd(track.timescale, track.duration), MP4.hdlr(track.type), MP4.minf(track));\r\n    }\r\n\r\n    static mfhd(sequenceNumber) {\r\n        return MP4.box(MP4.types.mfhd, new Uint8Array([\r\n            0x00,\r\n            0x00, 0x00, 0x00, // flags\r\n            (sequenceNumber >> 24),\r\n            (sequenceNumber >> 16) & 0xFF,\r\n            (sequenceNumber >> 8) & 0xFF,\r\n            sequenceNumber & 0xFF, // sequence_number\r\n        ]));\r\n    }\r\n\r\n    static minf(track) {\r\n        if (track.type === 'audio') {\r\n            return MP4.box(MP4.types.minf, MP4.box(MP4.types.smhd, MP4.SMHD), MP4.DINF, MP4.stbl(track));\r\n        } else {\r\n            return MP4.box(MP4.types.minf, MP4.box(MP4.types.vmhd, MP4.VMHD), MP4.DINF, MP4.stbl(track));\r\n        }\r\n    }\r\n\r\n    static moof(sn, baseMediaDecodeTime, track) {\r\n        return MP4.box(MP4.types.moof, MP4.mfhd(sn), MP4.traf(track, baseMediaDecodeTime));\r\n    }\r\n    /**\r\n     * @param tracks... (optional) {array} the tracks associated with this movie\r\n     */\r\n    static moov(tracks) {\r\n        var\r\n            i = tracks.length,\r\n            boxes = [];\r\n\r\n        while (i--) {\r\n            boxes[i] = MP4.trak(tracks[i]);\r\n        }\r\n\r\n        return MP4.box.apply(null, [MP4.types.moov, MP4.mvhd(tracks[0].timescale, tracks[0].duration)].concat(boxes).concat(MP4.mvex(tracks)));\r\n    }\r\n\r\n    static mvex(tracks) {\r\n        var\r\n            i = tracks.length,\r\n            boxes = [];\r\n\r\n        while (i--) {\r\n            boxes[i] = MP4.trex(tracks[i]);\r\n        }\r\n        return MP4.box.apply(null, [MP4.types.mvex].concat(boxes));\r\n    }\r\n\r\n    static mvhd(timescale) {\r\n        // duration *= timescale;\r\n        const duration = 0;\r\n        var\r\n            bytes = new Uint8Array([\r\n                0x00, // version 0\r\n                0x00, 0x00, 0x00, // flags\r\n                0x00, 0x00, 0x00, 0x01, // creation_time\r\n                0x00, 0x00, 0x00, 0x02, // modification_time\r\n                (timescale >> 24) & 0xFF,\r\n                (timescale >> 16) & 0xFF,\r\n                (timescale >> 8) & 0xFF,\r\n                timescale & 0xFF, // timescale\r\n                (duration >> 24) & 0xFF,\r\n                (duration >> 16) & 0xFF,\r\n                (duration >> 8) & 0xFF,\r\n                duration & 0xFF, // duration\r\n                0x00, 0x01, 0x00, 0x00, // 1.0 rate\r\n                0x01, 0x00, // 1.0 volume\r\n                0x00, 0x00, // reserved\r\n                0x00, 0x00, 0x00, 0x00, // reserved\r\n                0x00, 0x00, 0x00, 0x00, // reserved\r\n                0x00, 0x01, 0x00, 0x00,\r\n                0x00, 0x00, 0x00, 0x00,\r\n                0x00, 0x00, 0x00, 0x00,\r\n                0x00, 0x00, 0x00, 0x00,\r\n                0x00, 0x01, 0x00, 0x00,\r\n                0x00, 0x00, 0x00, 0x00,\r\n                0x00, 0x00, 0x00, 0x00,\r\n                0x00, 0x00, 0x00, 0x00,\r\n                0x40, 0x00, 0x00, 0x00, // transformation: unity matrix\r\n                0x00, 0x00, 0x00, 0x00,\r\n                0x00, 0x00, 0x00, 0x00,\r\n                0x00, 0x00, 0x00, 0x00,\r\n                0x00, 0x00, 0x00, 0x00,\r\n                0x00, 0x00, 0x00, 0x00,\r\n                0x00, 0x00, 0x00, 0x00, // pre_defined\r\n                0xff, 0xff, 0xff, 0xff // next_track_ID\r\n            ]);\r\n        return MP4.box(MP4.types.mvhd, bytes);\r\n    }\r\n\r\n    static sdtp(track) {\r\n        var\r\n            samples = track.samples || [],\r\n            bytes = new Uint8Array(4 + samples.length),\r\n            flags,\r\n            i;\r\n        // leave the full box header (4 bytes) all zero\r\n        // write the sample table\r\n        for (i = 0; i < samples.length; i++) {\r\n            flags = samples[i].flags;\r\n            bytes[i + 4] = (flags.dependsOn << 4) |\r\n                (flags.isDependedOn << 2) |\r\n                (flags.hasRedundancy);\r\n        }\r\n\r\n        return MP4.box(MP4.types.sdtp, bytes);\r\n    }\r\n\r\n    static stbl(track) {\r\n        return MP4.box(MP4.types.stbl, MP4.stsd(track), MP4.box(MP4.types.stts, MP4.STTS), MP4.box(MP4.types.stsc, MP4.STSC), MP4.box(MP4.types.stsz, MP4.STSZ), MP4.box(MP4.types.stco, MP4.STCO));\r\n    }\r\n\r\n    static avc1(track) {\r\n        var sps = [], pps = [], i, data, len;\r\n        // assemble the SPSs\r\n\r\n        for (i = 0; i < track.sps.length; i++) {\r\n            data = track.sps[i];\r\n            len = data.byteLength;\r\n            sps.push((len >>> 8) & 0xFF);\r\n            sps.push((len & 0xFF));\r\n            sps = sps.concat(Array.prototype.slice.call(data)); // SPS\r\n        }\r\n\r\n        // assemble the PPSs\r\n        for (i = 0; i < track.pps.length; i++) {\r\n            data = track.pps[i];\r\n            len = data.byteLength;\r\n            pps.push((len >>> 8) & 0xFF);\r\n            pps.push((len & 0xFF));\r\n            pps = pps.concat(Array.prototype.slice.call(data));\r\n        }\r\n\r\n        var avcc = MP4.box(MP4.types.avcC, new Uint8Array([\r\n            0x01,   // version\r\n            sps[3], // profile\r\n            sps[4], // profile compat\r\n            sps[5], // level\r\n            0xfc | 3, // lengthSizeMinusOne, hard-coded to 4 bytes\r\n            0xE0 | track.sps.length // 3bit reserved (111) + numOfSequenceParameterSets\r\n        ].concat(sps).concat([\r\n            track.pps.length // numOfPictureParameterSets\r\n        ]).concat(pps))), // \"PPS\"\r\n            width = track.width,\r\n            height = track.height;\r\n        //console.log('avcc:' + Hex.hexDump(avcc));\r\n        return MP4.box(MP4.types.avc1, new Uint8Array([\r\n            0x00, 0x00, 0x00, // reserved\r\n            0x00, 0x00, 0x00, // reserved\r\n            0x00, 0x01, // data_reference_index\r\n            0x00, 0x00, // pre_defined\r\n            0x00, 0x00, // reserved\r\n            0x00, 0x00, 0x00, 0x00,\r\n            0x00, 0x00, 0x00, 0x00,\r\n            0x00, 0x00, 0x00, 0x00, // pre_defined\r\n            (width >> 8) & 0xFF,\r\n            width & 0xff, // width\r\n            (height >> 8) & 0xFF,\r\n            height & 0xff, // height\r\n            0x00, 0x48, 0x00, 0x00, // horizresolution\r\n            0x00, 0x48, 0x00, 0x00, // vertresolution\r\n            0x00, 0x00, 0x00, 0x00, // reserved\r\n            0x00, 0x01, // frame_count\r\n            0x12,\r\n            0x6a, 0x65, 0x66, 0x66, // wfs.js\r\n            0x2d, 0x79, 0x61, 0x6e,\r\n            0x2f, 0x2f, 0x2f, 0x67,\r\n            0x77, 0x66, 0x73, 0x2E,\r\n            0x6A, 0x73, 0x00, 0x00,\r\n            0x00, 0x00, 0x00, 0x00,\r\n            0x00, 0x00, 0x00, 0x00,\r\n            0x00, 0x00, 0x00, // compressorname\r\n            0x00, 0x18,   // depth = 24\r\n            0x11, 0x11]), // pre_defined = -1\r\n            avcc,\r\n            MP4.box(MP4.types.btrt, new Uint8Array([\r\n                0x00, 0x1c, 0x9c, 0x80, // bufferSizeDB\r\n                0x00, 0x2d, 0xc6, 0xc0, // maxBitrate\r\n                0x00, 0x2d, 0xc6, 0xc0])) // avgBitrate\r\n        );\r\n    }\r\n\r\n    static esds(track) {\r\n        var configlen = track.config.length;\r\n        return new Uint8Array([\r\n            0x00, // version 0\r\n            0x00, 0x00, 0x00, // flags\r\n\r\n            0x03, // descriptor_type\r\n            0x17 + configlen, // length\r\n            0x00, 0x01, //es_id\r\n            0x00, // stream_priority\r\n\r\n            0x04, // descriptor_type\r\n            0x0f + configlen, // length\r\n            0x40, //codec : mpeg4_audio\r\n            0x15, // stream_type\r\n            0x00, 0x00, 0x00, // buffer_size\r\n            0x00, 0x00, 0x00, 0x00, // maxBitrate\r\n            0x00, 0x00, 0x00, 0x00, // avgBitrate\r\n\r\n            0x05 // descriptor_type\r\n        ].concat([configlen]).concat(track.config).concat([0x06, 0x01, 0x02])); // GASpecificConfig)); // length + audio config descriptor\r\n    }\r\n\r\n    static mp4a(track) {\r\n        var audiosamplerate = track.audiosamplerate;\r\n        return MP4.box(MP4.types.mp4a, new Uint8Array([\r\n            0x00, 0x00, 0x00, // reserved\r\n            0x00, 0x00, 0x00, // reserved\r\n            0x00, 0x01, // data_reference_index\r\n            0x00, 0x00, 0x00, 0x00,\r\n            0x00, 0x00, 0x00, 0x00, // reserved\r\n            0x00, track.channelCount, // channelcount\r\n            0x00, 0x10, // sampleSize:16bits\r\n            0x00, 0x00, 0x00, 0x00, // reserved2\r\n            (audiosamplerate >> 8) & 0xFF,\r\n            audiosamplerate & 0xff, //\r\n            0x00, 0x00]),\r\n            MP4.box(MP4.types.esds, MP4.esds(track)));\r\n    }\r\n\r\n    static stsd(track) {\r\n        if (track.type === 'audio') {\r\n            return MP4.box(MP4.types.stsd, MP4.STSD, MP4.mp4a(track));\r\n        } else {\r\n            return MP4.box(MP4.types.stsd, MP4.STSD, MP4.avc1(track));\r\n        }\r\n    }\r\n\r\n    static tkhd(track) {\r\n        var id = track.id,\r\n            duration = track.duration * track.timescale,\r\n            width = track.width,\r\n            height = track.height;\r\n\r\n        //   console.log( \"tkhd==> \",track.id, track.duration, track.timescale, width,height );\r\n\r\n        return MP4.box(MP4.types.tkhd, new Uint8Array([\r\n            0x00, // version 0\r\n            0x00, 0x00, 0x07, // flags\r\n            0x00, 0x00, 0x00, 0x00, // creation_time\r\n            0x00, 0x00, 0x00, 0x00, // modification_time\r\n            (id >> 24) & 0xFF,\r\n            (id >> 16) & 0xFF,\r\n            (id >> 8) & 0xFF,\r\n            id & 0xFF, // track_ID\r\n            0x00, 0x00, 0x00, 0x00, // reserved\r\n            (duration >> 24),\r\n            (duration >> 16) & 0xFF,\r\n            (duration >> 8) & 0xFF,\r\n            duration & 0xFF, // duration\r\n            0x00, 0x00, 0x00, 0x00,\r\n            0x00, 0x00, 0x00, 0x00, // reserved\r\n            0x00, 0x00, // layer\r\n            0x00, 0x00, // alternate_group\r\n            0x00, 0x00, // non-audio track volume\r\n            0x00, 0x00, // reserved\r\n            0x00, 0x01, 0x00, 0x00,\r\n            0x00, 0x00, 0x00, 0x00,\r\n            0x00, 0x00, 0x00, 0x00,\r\n            0x00, 0x00, 0x00, 0x00,\r\n            0x00, 0x01, 0x00, 0x00,\r\n            0x00, 0x00, 0x00, 0x00,\r\n            0x00, 0x00, 0x00, 0x00,\r\n            0x00, 0x00, 0x00, 0x00,\r\n            0x40, 0x00, 0x00, 0x00, // transformation: unity matrix\r\n            (width >> 8) & 0xFF,\r\n            width & 0xFF,\r\n            0x00, 0x00, // width\r\n            (height >> 8) & 0xFF,\r\n            height & 0xFF,\r\n            0x00, 0x00 // height\r\n        ]));\r\n    }\r\n\r\n    static traf(track, baseMediaDecodeTime) {\r\n        var sampleDependencyTable = MP4.sdtp(track),\r\n            id = track.id;\r\n\r\n\r\n\r\n        //  console.log( \"traf==> \",id ,baseMediaDecodeTime);\r\n\r\n        return MP4.box(MP4.types.traf,\r\n            MP4.box(MP4.types.tfhd, new Uint8Array([\r\n                0x00, // version 0\r\n                0x00, 0x00, 0x00, // flags\r\n                (id >> 24),\r\n                (id >> 16) & 0XFF,\r\n                (id >> 8) & 0XFF,\r\n                (id & 0xFF) // track_ID\r\n            ])),\r\n            MP4.box(MP4.types.tfdt, new Uint8Array([\r\n                0x00, // version 0\r\n                0x00, 0x00, 0x00, // flags\r\n                (baseMediaDecodeTime >> 24),\r\n                (baseMediaDecodeTime >> 16) & 0XFF,\r\n                (baseMediaDecodeTime >> 8) & 0XFF,\r\n                (baseMediaDecodeTime & 0xFF) // baseMediaDecodeTime\r\n            ])),\r\n            MP4.trun(track,\r\n                sampleDependencyTable.length +\r\n                16 + // tfhd\r\n                16 + // tfdt\r\n                8 +  // traf header\r\n                16 + // mfhd\r\n                8 +  // moof header\r\n                8),  // mdat header\r\n            sampleDependencyTable);\r\n    }\r\n\r\n    /**\r\n     * Generate a track box.\r\n     * @param track {object} a track definition\r\n     * @return {Uint8Array} the track box\r\n     */\r\n    static trak(track) {\r\n        track.duration = track.duration || 0xffffffff;\r\n        return MP4.box(MP4.types.trak, MP4.tkhd(track), MP4.mdia(track));\r\n    }\r\n\r\n    static trex(track) {\r\n        var id = track.id;\r\n        return MP4.box(MP4.types.trex, new Uint8Array([\r\n            0x00, // version 0\r\n            0x00, 0x00, 0x00, // flags\r\n            (id >> 24),\r\n            (id >> 16) & 0XFF,\r\n            (id >> 8) & 0XFF,\r\n            (id & 0xFF), // track_ID\r\n            0x00, 0x00, 0x00, 0x01, // default_sample_description_index\r\n            0x00, 0x00, 0x00, 0x00, // default_sample_duration\r\n            0x00, 0x00, 0x00, 0x00, // default_sample_size\r\n            0x00, 0x01, 0x00, 0x01 // default_sample_flags\r\n        ]));\r\n    }\r\n\r\n    static trun(track, offset) {\r\n        var samples = track.samples || [],\r\n            len = samples.length,\r\n            arraylen = 12 + (16 * len),\r\n            array = new Uint8Array(arraylen),\r\n            i, sample, duration, size, flags, cts;\r\n\r\n        //sample = samples[0];\r\n        //       console.log( \"trun==> \",sample.duration, sample.cts ,sample.size,len );\r\n\r\n        offset += 8 + arraylen;\r\n        array.set([\r\n            0x00, // version 0\r\n            0x00, 0x0f, 0x01, // flags\r\n            (len >>> 24) & 0xFF,\r\n            (len >>> 16) & 0xFF,\r\n            (len >>> 8) & 0xFF,\r\n            len & 0xFF, // sample_count\r\n            (offset >>> 24) & 0xFF,\r\n            (offset >>> 16) & 0xFF,\r\n            (offset >>> 8) & 0xFF,\r\n            offset & 0xFF // data_offset\r\n        ], 0);\r\n        for (i = 0; i < len; i++) {\r\n            sample = samples[i];\r\n            duration = sample.duration;\r\n            size = sample.size;\r\n            flags = sample.flags;\r\n            cts = sample.cts;\r\n            array.set([\r\n                (duration >>> 24) & 0xFF,\r\n                (duration >>> 16) & 0xFF,\r\n                (duration >>> 8) & 0xFF,\r\n                duration & 0xFF, // sample_duration\r\n                (size >>> 24) & 0xFF,\r\n                (size >>> 16) & 0xFF,\r\n                (size >>> 8) & 0xFF,\r\n                size & 0xFF, // sample_size\r\n                (flags.isLeading << 2) | flags.dependsOn,\r\n                (flags.isDependedOn << 6) |\r\n                (flags.hasRedundancy << 4) |\r\n                (flags.paddingValue << 1) |\r\n                flags.isNonSync,\r\n                flags.degradPrio & 0xF0 << 8,\r\n                flags.degradPrio & 0x0F, // sample_flags\r\n                (cts >>> 24) & 0xFF,\r\n                (cts >>> 16) & 0xFF,\r\n                (cts >>> 8) & 0xFF,\r\n                cts & 0xFF // sample_composition_time_offset\r\n            ], 12 + 16 * i);\r\n        }\r\n        return MP4.box(MP4.types.trun, array);\r\n    }\r\n\r\n    static initSegment(tracks) {\r\n        if (!MP4.types) {\r\n            MP4.init();\r\n        }\r\n        var movie = MP4.moov(tracks), result;\r\n        result = new Uint8Array(MP4.FTYP.byteLength + movie.byteLength);\r\n        result.set(MP4.FTYP);\r\n        result.set(movie, MP4.FTYP.byteLength);\r\n\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\nexport default MP4;\r\n",
    "/**\r\n * fMP4 remuxer\r\n*/\r\nimport AAC from '../helper/aac';\r\nimport Event from '../events';\r\nimport { logger } from '../utils/logger';\r\nimport MP4 from '../remux/mp4-generator';\r\nimport { ErrorTypes, ErrorDetails } from '../errors';\r\nimport '../utils/polyfill';\r\n\r\nclass MP4Remuxer {\r\n    constructor(observer, id, config) {\r\n        this.observer = observer;\r\n        this.id = id;\r\n        this.config = config;\r\n        this.ISGenerated = false;\r\n        this.PES2MP4SCALEFACTOR = 4;\r\n        this.PES_TIMESCALE = 90000;\r\n        this.MP4_TIMESCALE = this.PES_TIMESCALE / this.PES2MP4SCALEFACTOR;\r\n        this.nextAvcDts = 90300;\r\n        this.H264_TIMEBASE = 3000;\r\n    }\r\n\r\n    get passthrough() {\r\n        return false;\r\n    }\r\n\r\n    destroy() {\r\n    }\r\n\r\n    insertDiscontinuity() {\r\n        this._initPTS = this._initDTS = undefined;\r\n    }\r\n\r\n    switchLevel() {\r\n        this.ISGenerated = false;\r\n    }\r\n\r\n    pushVideo(level, sn, videoTrack, timeOffset, contiguous) {\r\n        this.level = level;\r\n        this.sn = sn;\r\n        let videoData;\r\n        // generate Init Segment if needed\r\n        if (!this.ISGenerated) {\r\n            this.generateVideoIS(videoTrack, timeOffset);\r\n        }\r\n        if (this.ISGenerated) {\r\n            if (videoTrack.samples.length) {\r\n                this.remuxVideo_2(videoTrack, timeOffset, contiguous);\r\n            }\r\n        }\r\n    }\r\n\r\n    remuxVideo_2(track, timeOffset, contiguous, audioTrackLength) {\r\n        var offset = 8,\r\n            pesTimeScale = this.PES_TIMESCALE,\r\n            pes2mp4ScaleFactor = this.PES2MP4SCALEFACTOR,\r\n            mp4SampleDuration,\r\n            mdat, moof,\r\n            firstPTS, firstDTS,\r\n            nextDTS,\r\n            inputSamples = track.samples,\r\n            outputSamples = [];\r\n\r\n        /* concatenate the video data and construct the mdat in place\r\n          (need 8 more bytes to fill length and mpdat type) */\r\n        mdat = new Uint8Array(track.len + (4 * track.nbNalu) + 8);\r\n        let view = new DataView(mdat.buffer);\r\n        view.setUint32(0, mdat.byteLength);\r\n        mdat.set(MP4.types.mdat, 4);\r\n        var sampleDuration = 0;\r\n        let ptsnorm, dtsnorm, mp4Sample, lastDTS;\r\n\r\n        for (let i = 0; i < inputSamples.length; i++) {\r\n            let avcSample = inputSamples[i],\r\n                mp4SampleLength = 0,\r\n                compositionTimeOffset;\r\n            // convert NALU bitstream to MP4 format (prepend NALU with size field)\r\n            while (avcSample.units.units.length) {\r\n                let unit = avcSample.units.units.shift();\r\n                view.setUint32(offset, unit.data.byteLength);\r\n                offset += 4;\r\n                mdat.set(unit.data, offset);\r\n                offset += unit.data.byteLength;\r\n                mp4SampleLength += 4 + unit.data.byteLength;\r\n            }\r\n\r\n            let pts = avcSample.pts - this._initPTS;\r\n            let dts = avcSample.dts - this._initDTS;\r\n            dts = Math.min(pts, dts);\r\n\r\n            if (lastDTS !== undefined) {\r\n                ptsnorm = this._PTSNormalize(pts, lastDTS);\r\n                dtsnorm = this._PTSNormalize(dts, lastDTS);\r\n                sampleDuration = (dtsnorm - lastDTS)\r\n                if (sampleDuration <= 0) {\r\n                    logger.log(`invalid sample duration at PTS/DTS: ${avcSample.pts}/${avcSample.dts}|dts norm: ${dtsnorm}|lastDTS: ${lastDTS}:${sampleDuration}`);\r\n                    sampleDuration = 1;\r\n                }\r\n            } else {\r\n                var nextAvcDts = this.nextAvcDts, delta;\r\n                ptsnorm = this._PTSNormalize(pts, nextAvcDts);\r\n                dtsnorm = this._PTSNormalize(dts, nextAvcDts);\r\n                if (nextAvcDts) {\r\n                    delta = Math.round((dtsnorm - nextAvcDts));\r\n                    if (/*contiguous ||*/ Math.abs(delta) < 600) {\r\n                        if (delta) {\r\n                            if (delta > 1) {\r\n                                logger.log(`AVC:${delta} ms hole between fragments detected,filling it`);\r\n                            } else if (delta < -1) {\r\n                                logger.log(`AVC:${(-delta)} ms overlapping between fragments detected`);\r\n                            }\r\n                            dtsnorm = nextAvcDts;\r\n                            ptsnorm = Math.max(ptsnorm - delta, dtsnorm);\r\n                            logger.log(`Video/PTS/DTS adjusted: ${ptsnorm}/${dtsnorm},delta:${delta}`);\r\n                        }\r\n                    }\r\n                }\r\n                this.firstPTS = Math.max(0, ptsnorm);\r\n                this.firstDTS = Math.max(0, dtsnorm);\r\n                sampleDuration = 0.03;\r\n            }\r\n\r\n            outputSamples.push({\r\n                size: mp4SampleLength,\r\n                duration: this.H264_TIMEBASE,\r\n                cts: 0,\r\n                flags: {\r\n                    isLeading: 0,\r\n                    isDependedOn: 0,\r\n                    hasRedundancy: 0,\r\n                    degradPrio: 0,\r\n                    dependsOn: avcSample.key ? 2 : 1,\r\n                    isNonSync: avcSample.key ? 0 : 1\r\n                }\r\n            });\r\n            lastDTS = dtsnorm;\r\n\r\n        }\r\n\r\n        var lastSampleDuration = 0;\r\n        if (outputSamples.length >= 2) {\r\n            lastSampleDuration = outputSamples[outputSamples.length - 2].duration;\r\n            outputSamples[0].duration = lastSampleDuration;\r\n        }\r\n        this.nextAvcDts = dtsnorm + lastSampleDuration;\r\n        let dropped = track.dropped;\r\n        track.len = 0;\r\n        track.nbNalu = 0;\r\n        track.dropped = 0;\r\n        if (outputSamples.length && navigator.userAgent.toLowerCase().indexOf('chrome') > -1) {\r\n            let flags = outputSamples[0].flags;\r\n            flags.dependsOn = 2;\r\n            flags.isNonSync = 0;\r\n        }\r\n        track.samples = outputSamples;\r\n        moof = MP4.moof(track.sequenceNumber++, dtsnorm, track);\r\n        track.samples = [];\r\n\r\n        let data = {\r\n            id: this.id,\r\n            level: this.level,\r\n            sn: this.sn,\r\n            data1: moof,\r\n            data2: mdat,\r\n            startPTS: ptsnorm,\r\n            endPTS: ptsnorm,\r\n            startDTS: dtsnorm,\r\n            endDTS: dtsnorm,\r\n            type: 'video',\r\n            nb: outputSamples.length,\r\n            dropped: dropped\r\n        };\r\n\r\n        this.observer.trigger(Event.FRAG_PARSING_DATA, data);\r\n        return data;\r\n    }\r\n\r\n    generateVideoIS(videoTrack, timeOffset) {\r\n        var observer = this.observer,\r\n            videoSamples = videoTrack.samples,\r\n            pesTimeScale = this.PES_TIMESCALE,\r\n            tracks = {},\r\n            data = { id: this.id, level: this.level, sn: this.sn, tracks: tracks, unique: false },\r\n            computePTSDTS = (this._initPTS === undefined),\r\n            initPTS, initDTS;\r\n\r\n        if (computePTSDTS) {\r\n            initPTS = initDTS = Infinity;\r\n        }\r\n\r\n        if (videoTrack.sps && videoTrack.pps && videoSamples.length) {\r\n            videoTrack.timescale = 90000;//this.MP4_TIMESCALE;\r\n            tracks.video = {\r\n                container: 'video/mp4',\r\n                codec: videoTrack.codec,\r\n                initSegment: MP4.initSegment([videoTrack]),\r\n                metadata: {\r\n                    width: videoTrack.width,\r\n                    height: videoTrack.height\r\n                }\r\n            };\r\n            if (computePTSDTS) {\r\n                initPTS = Math.min(initPTS, videoSamples[0].pts - this.H264_TIMEBASE);\r\n                initDTS = Math.min(initDTS, videoSamples[0].dts - this.H264_TIMEBASE);\r\n            }\r\n        }\r\n\r\n        if (Object.keys(tracks).length) {\r\n            observer.trigger(Event.FRAG_PARSING_INIT_SEGMENT, data);\r\n            this.ISGenerated = true;\r\n            if (computePTSDTS) {\r\n                this._initPTS = initPTS;\r\n                this._initDTS = initDTS;\r\n            }\r\n        } else {\r\n            console.log(\"generateVideoIS ERROR==> \", ErrorTypes.MEDIA_ERROR);\r\n        }\r\n    }\r\n\r\n    remux(level, sn, audioTrack, videoTrack, id3Track, textTrack, timeOffset, contiguous) {\r\n        this.level = level;\r\n        this.sn = sn;\r\n        // generate Init Segment if needed\r\n        if (!this.ISGenerated) {\r\n            this.generateIS(audioTrack, videoTrack, timeOffset);\r\n        }\r\n\r\n        if (this.ISGenerated) {\r\n            // Purposefully remuxing audio before video, so that remuxVideo can use nextAacPts, which is\r\n            // calculated in remuxAudio.\r\n            //logger.log('nb AAC samples:' + audioTrack.samples.length);\r\n            if (audioTrack.samples.length) {\r\n                let audioData = this.remuxAudio(audioTrack, timeOffset, contiguous);\r\n                //logger.log('nb AVC samples:' + videoTrack.samples.length);\r\n                if (videoTrack.samples.length) {\r\n                    let audioTrackLength;\r\n                    if (audioData) {\r\n                        audioTrackLength = audioData.endPTS - audioData.startPTS;\r\n                    }\r\n                    this.remuxVideo(videoTrack, timeOffset, contiguous, audioTrackLength);\r\n                }\r\n            } else {\r\n                let videoData;\r\n                //logger.log('nb AVC samples:' + videoTrack.samples.length);\r\n                if (videoTrack.samples.length) {\r\n                    videoData = this.remuxVideo(videoTrack, timeOffset, contiguous);\r\n                }\r\n                if (videoData && audioTrack.codec) {\r\n                    this.remuxEmptyAudio(audioTrack, timeOffset, contiguous, videoData);\r\n                }\r\n            }\r\n        }\r\n        //logger.log('nb ID3 samples:' + audioTrack.samples.length);\r\n        if (id3Track.samples.length) {\r\n            this.remuxID3(id3Track, timeOffset);\r\n        }\r\n        //logger.log('nb ID3 samples:' + audioTrack.samples.length);\r\n        if (textTrack.samples.length) {\r\n            this.remuxText(textTrack, timeOffset);\r\n        }\r\n        //notify end of parsing\r\n        this.observer.trigger(Event.FRAG_PARSED, { id: this.id, level: this.level, sn: this.sn });\r\n    }\r\n\r\n    generateIS(audioTrack, videoTrack, timeOffset) {\r\n        var observer = this.observer,\r\n            audioSamples = audioTrack.samples,\r\n            videoSamples = videoTrack.samples,\r\n            pesTimeScale = this.PES_TIMESCALE,\r\n            tracks = {},\r\n            data = { id: this.id, level: this.level, sn: this.sn, tracks: tracks, unique: false },\r\n            computePTSDTS = (this._initPTS === undefined),\r\n            initPTS, initDTS;\r\n\r\n        if (computePTSDTS) {\r\n            initPTS = initDTS = Infinity;\r\n        }\r\n        if (audioTrack.config && audioSamples.length) {\r\n            audioTrack.timescale = audioTrack.audiosamplerate;\r\n            // MP4 duration (track duration in seconds multiplied by timescale) is coded on 32 bits\r\n            // we know that each AAC sample contains 1024 frames....\r\n            // in order to avoid overflowing the 32 bit counter for large duration, we use smaller timescale (timescale/gcd)\r\n            // we just need to ensure that AAC sample duration will still be an integer (will be 1024/gcd)\r\n            if (audioTrack.timescale * audioTrack.duration > Math.pow(2, 32)) {\r\n                let greatestCommonDivisor = function (a, b) {\r\n                    if (!b) {\r\n                        return a;\r\n                    }\r\n                    return greatestCommonDivisor(b, a % b);\r\n                };\r\n                audioTrack.timescale = audioTrack.audiosamplerate / greatestCommonDivisor(audioTrack.audiosamplerate, 1024);\r\n            }\r\n            logger.log('audio mp4 timescale :' + audioTrack.timescale);\r\n            tracks.audio = {\r\n                container: 'audio/mp4',\r\n                codec: audioTrack.codec,\r\n                initSegment: MP4.initSegment([audioTrack]),\r\n                metadata: {\r\n                    channelCount: audioTrack.channelCount\r\n                }\r\n            };\r\n            if (computePTSDTS) {\r\n                // remember first PTS of this demuxing context. for audio, PTS + DTS ...\r\n                initPTS = initDTS = audioSamples[0].pts - pesTimeScale * timeOffset;\r\n            }\r\n        }\r\n\r\n        if (videoTrack.sps && videoTrack.pps && videoSamples.length) {\r\n            videoTrack.timescale = this.MP4_TIMESCALE;\r\n            tracks.video = {\r\n                container: 'video/mp4',\r\n                codec: videoTrack.codec,\r\n                initSegment: MP4.initSegment([videoTrack]),\r\n                metadata: {\r\n                    width: videoTrack.width,\r\n                    height: videoTrack.height\r\n                }\r\n            };\r\n            if (computePTSDTS) {\r\n                initPTS = Math.min(initPTS, videoSamples[0].pts - pesTimeScale * timeOffset);\r\n                initDTS = Math.min(initDTS, videoSamples[0].dts - pesTimeScale * timeOffset);\r\n            }\r\n        }\r\n\r\n        if (Object.keys(tracks).length) {\r\n            observer.trigger(Event.FRAG_PARSING_INIT_SEGMENT, data);\r\n            this.ISGenerated = true;\r\n            if (computePTSDTS) {\r\n                this._initPTS = initPTS;\r\n                this._initDTS = initDTS;\r\n            }\r\n        } else {\r\n            observer.trigger(Event.ERROR, { type: ErrorTypes.MEDIA_ERROR, id: this.id, details: ErrorDetails.FRAG_PARSING_ERROR, fatal: false, reason: 'no audio/video samples found' });\r\n        }\r\n    }\r\n\r\n    remuxVideo(track, timeOffset, contiguous, audioTrackLength) {\r\n        var offset = 8,\r\n            pesTimeScale = this.PES_TIMESCALE,\r\n            pes2mp4ScaleFactor = this.PES2MP4SCALEFACTOR,\r\n            mp4SampleDuration,\r\n            mdat, moof,\r\n            firstPTS, firstDTS,\r\n            nextDTS,\r\n            lastPTS, lastDTS,\r\n            inputSamples = track.samples,\r\n            outputSamples = [];\r\n\r\n        // PTS is coded on 33bits, and can loop from -2^32 to 2^32\r\n        // PTSNormalize will make PTS/DTS value monotonic, we use last known DTS value as reference value\r\n        let nextAvcDts;\r\n        if (contiguous) {\r\n            // if parsed fragment is contiguous with last one, let's use last DTS value as reference\r\n            nextAvcDts = this.nextAvcDts;\r\n        } else {\r\n            // if not contiguous, let's use target timeOffset\r\n            nextAvcDts = timeOffset * pesTimeScale;\r\n        }\r\n\r\n        // compute first DTS and last DTS, normalize them against reference value\r\n        let sample = inputSamples[0];\r\n        firstDTS = Math.max(this._PTSNormalize(sample.dts, nextAvcDts) - this._initDTS, 0);\r\n        firstPTS = Math.max(this._PTSNormalize(sample.pts, nextAvcDts) - this._initDTS, 0);\r\n\r\n        // check timestamp continuity accross consecutive fragments (this is to remove inter-fragment gap/hole)\r\n        let delta = Math.round((firstDTS - nextAvcDts) / 90);\r\n        // if fragment are contiguous, detect hole/overlapping between fragments\r\n        if (contiguous) {\r\n            if (delta) {\r\n                if (delta > 1) {\r\n                    logger.log(`AVC:${delta} ms hole between fragments detected,filling it`);\r\n                } else if (delta < -1) {\r\n                    logger.log(`AVC:${(-delta)} ms overlapping between fragments detected`);\r\n                }\r\n                // remove hole/gap : set DTS to next expected DTS\r\n                firstDTS = nextAvcDts;\r\n                inputSamples[0].dts = firstDTS + this._initDTS;\r\n                // offset PTS as well, ensure that PTS is smaller or equal than new DTS\r\n                firstPTS = Math.max(firstPTS - delta, nextAvcDts);\r\n                inputSamples[0].pts = firstPTS + this._initDTS;\r\n                logger.log(`Video/PTS/DTS adjusted: ${firstPTS}/${firstDTS},delta:${delta}`);\r\n            }\r\n        }\r\n        nextDTS = firstDTS;\r\n\r\n        // compute lastPTS/lastDTS\r\n        sample = inputSamples[inputSamples.length - 1];\r\n        lastDTS = Math.max(this._PTSNormalize(sample.dts, nextAvcDts) - this._initDTS, 0);\r\n        lastPTS = Math.max(this._PTSNormalize(sample.pts, nextAvcDts) - this._initDTS, 0);\r\n        lastPTS = Math.max(lastPTS, lastDTS);\r\n\r\n        let vendor = navigator.vendor, userAgent = navigator.userAgent,\r\n            isSafari = vendor && vendor.indexOf('Apple') > -1 && userAgent && !userAgent.match('CriOS');\r\n\r\n        // on Safari let's signal the same sample duration for all samples\r\n        // sample duration (as expected by trun MP4 boxes), should be the delta between sample DTS\r\n        // set this constant duration as being the avg delta between consecutive DTS.\r\n        if (isSafari) {\r\n            mp4SampleDuration = Math.round((lastDTS - firstDTS) / (pes2mp4ScaleFactor * (inputSamples.length - 1)));\r\n        }\r\n\r\n        // normalize all PTS/DTS now ...\r\n        for (let i = 0; i < inputSamples.length; i++) {\r\n            let sample = inputSamples[i];\r\n            if (isSafari) {\r\n                // sample DTS is computed using a constant decoding offset (mp4SampleDuration) between samples\r\n                sample.dts = firstDTS + i * pes2mp4ScaleFactor * mp4SampleDuration;\r\n            } else {\r\n                // ensure sample monotonic DTS\r\n                sample.dts = Math.max(this._PTSNormalize(sample.dts, nextAvcDts) - this._initDTS, firstDTS);\r\n                // ensure dts is a multiple of scale factor to avoid rounding issues\r\n                sample.dts = Math.round(sample.dts / pes2mp4ScaleFactor) * pes2mp4ScaleFactor;\r\n            }\r\n            // we normalize PTS against nextAvcDts, we also substract initDTS (some streams don't start @ PTS O)\r\n            // and we ensure that computed value is greater or equal than sample DTS\r\n            sample.pts = Math.max(this._PTSNormalize(sample.pts, nextAvcDts) - this._initDTS, sample.dts);\r\n            // ensure pts is a multiple of scale factor to avoid rounding issues\r\n            sample.pts = Math.round(sample.pts / pes2mp4ScaleFactor) * pes2mp4ScaleFactor;\r\n\r\n        }\r\n\r\n        /* concatenate the video data and construct the mdat in place\r\n          (need 8 more bytes to fill length and mpdat type) */\r\n        mdat = new Uint8Array(track.len + (4 * track.nbNalu) + 8);\r\n        let view = new DataView(mdat.buffer);\r\n        view.setUint32(0, mdat.byteLength);\r\n        mdat.set(MP4.types.mdat, 4);\r\n\r\n        for (let i = 0; i < inputSamples.length; i++) {\r\n            let avcSample = inputSamples[i],\r\n                mp4SampleLength = 0,\r\n                compositionTimeOffset;\r\n            // convert NALU bitstream to MP4 format (prepend NALU with size field)\r\n            while (avcSample.units.units.length) {\r\n                let unit = avcSample.units.units.shift();\r\n                view.setUint32(offset, unit.data.byteLength);\r\n                offset += 4;\r\n                mdat.set(unit.data, offset);\r\n                offset += unit.data.byteLength;\r\n                mp4SampleLength += 4 + unit.data.byteLength;\r\n            }\r\n\r\n            if (!isSafari) {\r\n                // expected sample duration is the Decoding Timestamp diff of consecutive samples\r\n                if (i < inputSamples.length - 1) {\r\n                    mp4SampleDuration = inputSamples[i + 1].dts - avcSample.dts;\r\n                } else {\r\n                    let config = this.config,\r\n                        lastFrameDuration = avcSample.dts - inputSamples[i > 0 ? i - 1 : i].dts;\r\n                    if (config.stretchShortVideoTrack) {\r\n                        // In some cases, a segment's audio track duration may exceed the video track duration.\r\n                        // Since we've already remuxed audio, and we know how long the audio track is, we look to\r\n                        // see if the delta to the next segment is longer than the minimum of maxBufferHole and\r\n                        // maxSeekHole. If so, playback would potentially get stuck, so we artificially inflate\r\n                        // the duration of the last frame to minimize any potential gap between segments.\r\n                        let maxBufferHole = config.maxBufferHole,\r\n                            maxSeekHole = config.maxSeekHole,\r\n                            gapTolerance = Math.floor(Math.min(maxBufferHole, maxSeekHole) * pesTimeScale),\r\n                            deltaToFrameEnd = (audioTrackLength ? firstPTS + audioTrackLength * pesTimeScale : this.nextAacPts) - avcSample.pts;\r\n                        if (deltaToFrameEnd > gapTolerance) {\r\n                            // We subtract lastFrameDuration from deltaToFrameEnd to try to prevent any video\r\n                            // frame overlap. maxBufferHole/maxSeekHole should be >> lastFrameDuration anyway.\r\n                            mp4SampleDuration = deltaToFrameEnd - lastFrameDuration;\r\n                            if (mp4SampleDuration < 0) {\r\n                                mp4SampleDuration = lastFrameDuration;\r\n                            }\r\n                            logger.log(`It is approximately ${deltaToFrameEnd / 90} ms to the next segment; using duration ${mp4SampleDuration / 90} ms for the last video frame.`);\r\n                        } else {\r\n                            mp4SampleDuration = lastFrameDuration;\r\n                        }\r\n                    } else {\r\n                        mp4SampleDuration = lastFrameDuration;\r\n                    }\r\n                }\r\n                mp4SampleDuration /= pes2mp4ScaleFactor;\r\n                compositionTimeOffset = Math.round((avcSample.pts - avcSample.dts) / pes2mp4ScaleFactor);\r\n            } else {\r\n                compositionTimeOffset = Math.max(0, mp4SampleDuration * Math.round((avcSample.pts - avcSample.dts) / (pes2mp4ScaleFactor * mp4SampleDuration)));\r\n            }\r\n            outputSamples.push({\r\n                size: mp4SampleLength,\r\n                // constant duration\r\n                duration: mp4SampleDuration,\r\n                cts: compositionTimeOffset,\r\n                flags: {\r\n                    isLeading: 0,\r\n                    isDependedOn: 0,\r\n                    hasRedundancy: 0,\r\n                    degradPrio: 0,\r\n                    dependsOn: avcSample.key ? 2 : 1,\r\n                    isNonSync: avcSample.key ? 0 : 1\r\n                }\r\n            });\r\n        }\r\n        // next AVC sample DTS should be equal to last sample DTS + last sample duration (in PES timescale)\r\n        this.nextAvcDts = lastDTS + mp4SampleDuration * pes2mp4ScaleFactor;\r\n        let dropped = track.dropped;\r\n        track.len = 0;\r\n        track.nbNalu = 0;\r\n        track.dropped = 0;\r\n        if (outputSamples.length && navigator.userAgent.toLowerCase().indexOf('chrome') > -1) {\r\n            let flags = outputSamples[0].flags;\r\n            // chrome workaround, mark first sample as being a Random Access Point to avoid sourcebuffer append issue\r\n            // https://code.google.com/p/chromium/issues/detail?id=229412\r\n            flags.dependsOn = 2;\r\n            flags.isNonSync = 0;\r\n        }\r\n        track.samples = outputSamples;\r\n        moof = MP4.moof(track.sequenceNumber++, firstDTS / pes2mp4ScaleFactor, track);\r\n        track.samples = [];\r\n\r\n        let data = {\r\n            id: this.id,\r\n            level: this.level,\r\n            sn: this.sn,\r\n            data1: moof,\r\n            data2: mdat,\r\n            startPTS: firstPTS / pesTimeScale,\r\n            endPTS: (lastPTS + pes2mp4ScaleFactor * mp4SampleDuration) / pesTimeScale,\r\n            startDTS: firstPTS / pesTimeScale,\r\n            endDTS: (lastPTS + pes2mp4ScaleFactor * mp4SampleDuration) / pesTimeScale,\r\n            // startDTS: firstDTS / pesTimeScale,\r\n            // endDTS: this.nextAvcDts / pesTimeScale,\r\n            type: 'video',\r\n            nb: outputSamples.length,\r\n            dropped: dropped\r\n        };\r\n        this.observer.trigger(Event.FRAG_PARSING_DATA, data);\r\n        return data;\r\n    }\r\n\r\n    remuxAudio(track, timeOffset, contiguous) {\r\n        let pesTimeScale = this.PES_TIMESCALE,\r\n            mp4timeScale = track.timescale,\r\n            pes2mp4ScaleFactor = pesTimeScale / mp4timeScale,\r\n            expectedSampleDuration = track.timescale * 1024 / track.audiosamplerate;\r\n        var view,\r\n            offset = 8,\r\n            aacSample, mp4Sample,\r\n            unit,\r\n            mdat, moof,\r\n            firstPTS, firstDTS, lastDTS,\r\n            pts, dts, ptsnorm, dtsnorm,\r\n            samples = [],\r\n            samples0 = [];\r\n\r\n        track.samples.sort(function (a, b) {\r\n            return (a.pts - b.pts);\r\n        });\r\n        samples0 = track.samples;\r\n\r\n        let nextAacPts = (contiguous ? this.nextAacPts : timeOffset * pesTimeScale);\r\n\r\n        // If the audio track is missing samples, the frames seem to get \"left-shifted\" within the\r\n        // resulting mp4 segment, causing sync issues and leaving gaps at the end of the audio segment.\r\n        // In an effort to prevent this from happening, we inject frames here where there are gaps.\r\n        // When possible, we inject a silent frame; when that's not possible, we duplicate the last\r\n        // frame.\r\n        let firstPtsNorm = this._PTSNormalize(samples0[0].pts - this._initPTS, nextAacPts),\r\n            pesFrameDuration = expectedSampleDuration * pes2mp4ScaleFactor;\r\n        var nextPtsNorm = firstPtsNorm + pesFrameDuration;\r\n        for (var i = 1; i < samples0.length;) {\r\n            // First, let's see how far off this frame is from where we expect it to be\r\n            var sample = samples0[i],\r\n                ptsNorm = this._PTSNormalize(sample.pts - this._initPTS, nextAacPts),\r\n                delta = ptsNorm - nextPtsNorm;\r\n\r\n            // If we're overlapping by more than half a duration, drop this sample\r\n            if (delta < (-0.5 * pesFrameDuration)) {\r\n                logger.log(`Dropping frame due to ${Math.abs(delta / 90)} ms overlap.`);\r\n                samples0.splice(i, 1);\r\n                track.len -= sample.unit.length;\r\n                // Don't touch nextPtsNorm or i\r\n            }\r\n            // Otherwise, if we're more than half a frame away from where we should be, insert missing frames\r\n            else if (delta > (0.5 * pesFrameDuration)) {\r\n                var missing = Math.round(delta / pesFrameDuration);\r\n                logger.log(`Injecting ${missing} frame${missing > 1 ? 's' : ''} of missing audio due to ${Math.round(delta / 90)} ms gap.`);\r\n                for (var j = 0; j < missing; j++) {\r\n                    var newStamp = samples0[i - 1].pts + pesFrameDuration,\r\n                        fillFrame = AAC.getSilentFrame(track.channelCount);\r\n                    if (!fillFrame) {\r\n                        logger.log('Unable to get silent frame for given audio codec; duplicating last frame instead.');\r\n                        fillFrame = sample.unit.slice(0);\r\n                    }\r\n                    samples0.splice(i, 0, { unit: fillFrame, pts: newStamp, dts: newStamp });\r\n                    track.len += fillFrame.length;\r\n                    i += 1;\r\n                }\r\n\r\n                // Adjust sample to next expected pts\r\n                nextPtsNorm += (missing + 1) * pesFrameDuration;\r\n                sample.pts = samples0[i - 1].pts + pesFrameDuration;\r\n                i += 1;\r\n            }\r\n            // Otherwise, we're within half a frame duration, so just adjust pts\r\n            else {\r\n                if (Math.abs(delta) > (0.1 * pesFrameDuration)) {\r\n                    logger.log(`Invalid frame delta ${ptsNorm - nextPtsNorm + pesFrameDuration} at PTS ${Math.round(ptsNorm / 90)} (should be ${pesFrameDuration}).`);\r\n                }\r\n                nextPtsNorm += pesFrameDuration;\r\n                sample.pts = samples0[i - 1].pts + pesFrameDuration;\r\n                i += 1;\r\n            }\r\n        }\r\n\r\n        while (samples0.length) {\r\n            aacSample = samples0.shift();\r\n            unit = aacSample.unit;\r\n            pts = aacSample.pts - this._initDTS;\r\n            dts = aacSample.dts - this._initDTS;\r\n            //logger.log(`Audio/PTS:${Math.round(pts/90)}`);\r\n            // if not first sample\r\n            if (lastDTS !== undefined) {\r\n                ptsnorm = this._PTSNormalize(pts, lastDTS);\r\n                dtsnorm = this._PTSNormalize(dts, lastDTS);\r\n                mp4Sample.duration = (dtsnorm - lastDTS) / pes2mp4ScaleFactor;\r\n            } else {\r\n                ptsnorm = this._PTSNormalize(pts, nextAacPts);\r\n                dtsnorm = this._PTSNormalize(dts, nextAacPts);\r\n                let delta = Math.round(1000 * (ptsnorm - nextAacPts) / pesTimeScale);\r\n                // if fragment are contiguous, detect hole/overlapping between fragments\r\n                if (contiguous) {\r\n                    // log delta\r\n                    if (delta) {\r\n                        if (delta > 0) {\r\n                            logger.log(`${delta} ms hole between AAC samples detected,filling it`);\r\n                            // if we have frame overlap, overlapping for more than half a frame duraion\r\n                        } else if (delta < -12) {\r\n                            // drop overlapping audio frames... browser will deal with it\r\n                            logger.log(`${(-delta)} ms overlapping between AAC samples detected, drop frame`);\r\n                            track.len -= unit.byteLength;\r\n                            continue;\r\n                        }\r\n                        // set PTS/DTS to expected PTS/DTS\r\n                        ptsnorm = dtsnorm = nextAacPts;\r\n                    }\r\n                }\r\n                // remember first PTS of our aacSamples, ensure value is positive\r\n                firstPTS = Math.max(0, ptsnorm);\r\n                firstDTS = Math.max(0, dtsnorm);\r\n                if (track.len > 0) {\r\n                    /* concatenate the audio data and construct the mdat in place\r\n                      (need 8 more bytes to fill length and mdat type) */\r\n                    mdat = new Uint8Array(track.len + 8);\r\n                    view = new DataView(mdat.buffer);\r\n                    view.setUint32(0, mdat.byteLength);\r\n                    mdat.set(MP4.types.mdat, 4);\r\n                } else {\r\n                    // no audio samples\r\n                    return;\r\n                }\r\n            }\r\n            mdat.set(unit, offset);\r\n            offset += unit.byteLength;\r\n            //console.log('PTS/DTS/initDTS/normPTS/normDTS/relative PTS : ${aacSample.pts}/${aacSample.dts}/${this._initDTS}/${ptsnorm}/${dtsnorm}/${(aacSample.pts/4294967296).toFixed(3)}');\r\n            mp4Sample = {\r\n                size: unit.byteLength,\r\n                cts: 0,\r\n                duration: 0,\r\n                flags: {\r\n                    isLeading: 0,\r\n                    isDependedOn: 0,\r\n                    hasRedundancy: 0,\r\n                    degradPrio: 0,\r\n                    dependsOn: 1,\r\n                }\r\n            };\r\n            samples.push(mp4Sample);\r\n            lastDTS = dtsnorm;\r\n        }\r\n        var lastSampleDuration = 0;\r\n        var nbSamples = samples.length;\r\n        //set last sample duration as being identical to previous sample\r\n        if (nbSamples >= 2) {\r\n            lastSampleDuration = samples[nbSamples - 2].duration;\r\n            mp4Sample.duration = lastSampleDuration;\r\n        }\r\n        if (nbSamples) {\r\n            // next aac sample PTS should be equal to last sample PTS + duration\r\n            this.nextAacPts = ptsnorm + pes2mp4ScaleFactor * lastSampleDuration;\r\n            //logger.log('Audio/PTS/PTSend:' + aacSample.pts.toFixed(0) + '/' + this.nextAacDts.toFixed(0));\r\n            track.len = 0;\r\n            track.samples = samples;\r\n            moof = MP4.moof(track.sequenceNumber++, firstDTS / pes2mp4ScaleFactor, track);\r\n            track.samples = [];\r\n            let audioData = {\r\n                id: this.id,\r\n                level: this.level,\r\n                sn: this.sn,\r\n                data1: moof,\r\n                data2: mdat,\r\n                startPTS: firstPTS / pesTimeScale,\r\n                endPTS: this.nextAacPts / pesTimeScale,\r\n                startDTS: firstDTS / pesTimeScale,\r\n                endDTS: (dtsnorm + pes2mp4ScaleFactor * lastSampleDuration) / pesTimeScale,\r\n                type: 'audio',\r\n                nb: nbSamples\r\n            };\r\n            this.observer.trigger(Event.FRAG_PARSING_DATA, audioData);\r\n            return audioData;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    remuxEmptyAudio(track, timeOffset, contiguous, videoData) {\r\n        let pesTimeScale = this.PES_TIMESCALE,\r\n            mp4timeScale = track.timescale ? track.timescale : track.audiosamplerate,\r\n            pes2mp4ScaleFactor = pesTimeScale / mp4timeScale,\r\n\r\n            // sync with video's timestamp\r\n            startDTS = videoData.startDTS * pesTimeScale + this._initDTS,\r\n            endDTS = videoData.endDTS * pesTimeScale + this._initDTS,\r\n\r\n            // one sample's duration value\r\n            sampleDuration = 1024,\r\n            frameDuration = pes2mp4ScaleFactor * sampleDuration,\r\n\r\n            // samples count of this segment's duration\r\n            nbSamples = Math.ceil((endDTS - startDTS) / frameDuration),\r\n\r\n            // silent frame\r\n            silentFrame = AAC.getSilentFrame(track.channelCount);\r\n\r\n        // Can't remux if we can't generate a silent frame...\r\n        if (!silentFrame) {\r\n            logger.trace('Unable to remuxEmptyAudio since we were unable to get a silent frame for given audio codec!');\r\n            return;\r\n        }\r\n\r\n        let samples = [];\r\n        for (var i = 0; i < nbSamples; i++) {\r\n            var stamp = startDTS + i * frameDuration;\r\n            samples.push({ unit: silentFrame.slice(0), pts: stamp, dts: stamp });\r\n            track.len += silentFrame.length;\r\n        }\r\n        track.samples = samples;\r\n\r\n        this.remuxAudio(track, timeOffset, contiguous);\r\n    }\r\n\r\n    remuxID3(track, timeOffset) {\r\n        var length = track.samples.length, sample;\r\n        // consume samples\r\n        if (length) {\r\n            for (var index = 0; index < length; index++) {\r\n                sample = track.samples[index];\r\n                // setting id3 pts, dts to relative time\r\n                // using this._initPTS and this._initDTS to calculate relative time\r\n                sample.pts = ((sample.pts - this._initPTS) / this.PES_TIMESCALE);\r\n                sample.dts = ((sample.dts - this._initDTS) / this.PES_TIMESCALE);\r\n            }\r\n            this.observer.trigger(Event.FRAG_PARSING_METADATA, {\r\n                id: this.id,\r\n                level: this.level,\r\n                sn: this.sn,\r\n                samples: track.samples\r\n            });\r\n        }\r\n\r\n        track.samples = [];\r\n        timeOffset = timeOffset;\r\n    }\r\n\r\n    remuxText(track, timeOffset) {\r\n        track.samples.sort(function (a, b) {\r\n            return (a.pts - b.pts);\r\n        });\r\n\r\n        var length = track.samples.length, sample;\r\n        // consume samples\r\n        if (length) {\r\n            for (var index = 0; index < length; index++) {\r\n                sample = track.samples[index];\r\n                // setting text pts, dts to relative time\r\n                // using this._initPTS and this._initDTS to calculate relative time\r\n                sample.pts = ((sample.pts - this._initPTS) / this.PES_TIMESCALE);\r\n            }\r\n            this.observer.trigger(Event.FRAG_PARSING_USERDATA, {\r\n                id: this.id,\r\n                level: this.level,\r\n                sn: this.sn,\r\n                samples: track.samples\r\n            });\r\n        }\r\n\r\n        track.samples = [];\r\n        timeOffset = timeOffset;\r\n    }\r\n\r\n    _PTSNormalize(value, reference) {\r\n        var offset;\r\n        if (reference === undefined) {\r\n            return value;\r\n        }\r\n        if (reference < value) {\r\n            // - 2^33\r\n            offset = -8589934592;\r\n        } else {\r\n            // + 2^33\r\n            offset = 8589934592;\r\n        }\r\n        /* PTS is 33bit (from 0 to 2^33 -1)\r\n          if diff between value and reference is bigger than half of the amplitude (2^32) then it means that\r\n          PTS looping occured. fill the gap */\r\n        while (Math.abs(value - reference) > 4294967296) {\r\n            value += offset;\r\n        }\r\n        return value;\r\n    }\r\n\r\n}\r\n\r\nexport default MP4Remuxer;\r\n",
    "/*\r\n * H264 NAL Slicer\r\n */\r\nimport Event from '../events';\r\nimport EventHandler from '../event-handler';\r\nimport H264Demuxer from '../demux/h264-demuxer';\r\n\r\nclass SlicesReader extends EventHandler {\r\n\r\n    constructor(wfs, config = null) {\r\n        super(wfs, Event.H264_DATA_PARSING);\r\n\r\n        this.config = this.wfs.config || config;\r\n        this.h264Demuxer = new H264Demuxer(wfs);\r\n        this.wfs = wfs;\r\n        this.lastBuf = null;\r\n        this.nals = [];\r\n    }\r\n\r\n    destroy() {\r\n        this.lastBuf = null;\r\n        this.nals = [];\r\n        EventHandler.prototype.destroy.call(this);\r\n    }\r\n\r\n    _read(buffer) {\r\n        var typedAr = null;\r\n        this.nals = [];\r\n        if (!buffer || buffer.byteLength < 1) return;\r\n        if (this.lastBuf) {\r\n            typedAr = new Uint8Array(buffer.byteLength + this.lastBuf.length);\r\n            typedAr.set(this.lastBuf);\r\n            typedAr.set(new Uint8Array(buffer), this.lastBuf.length);\r\n        } else {\r\n            typedAr = new Uint8Array(buffer);\r\n        }\r\n        var lastNalEndPos = 0;\r\n        var b1 = -1; // byte before one\r\n        var b2 = -2; // byte before two\r\n        var nalStartPos = new Array();\r\n        for (var i = 0; i < typedAr.length; i += 2) {\r\n            var b_0 = typedAr[i];\r\n            var b_1 = typedAr[i + 1];\r\n            if (b1 == 0 && b_0 == 0 && b_1 == 0) {\r\n                nalStartPos.push(i - 1);\r\n            } else if (b_1 == 1 && b_0 == 0 && b1 == 0 && b2 == 0) {\r\n                nalStartPos.push(i - 2);\r\n            }\r\n            b2 = b_0;\r\n            b1 = b_1;\r\n        }\r\n        if (nalStartPos.length > 1) {\r\n            for (var i = 0; i < nalStartPos.length - 1; ++i) {\r\n                this.nals.push(typedAr.subarray(nalStartPos[i], nalStartPos[i + 1] + 1));\r\n                lastNalEndPos = nalStartPos[i + 1];\r\n            }\r\n        } else {\r\n            lastNalEndPos = nalStartPos[0];\r\n        }\r\n        if (lastNalEndPos != 0 && lastNalEndPos < typedAr.length) {\r\n            this.lastBuf = typedAr.subarray(lastNalEndPos);\r\n        } else {\r\n            if (!! !this.lastBuf) {\r\n                this.lastBuf = typedAr;\r\n            }\r\n            var _newBuf = new Uint8Array(this.lastBuf.length + buffer.byteLength);\r\n            _newBuf.set(this.lastBuf);\r\n            _newBuf.set(new Uint8Array(buffer), this.lastBuf.length);\r\n            this.lastBuf = _newBuf;\r\n        }\r\n    }\r\n\r\n    onH264DataParsing(event) {\r\n        this._read(event.data);\r\n        var $this = this;\r\n        this.nals.forEach(function (nal) {\r\n            $this.wfs.trigger(Event.H264_DATA_PARSED, {\r\n                data: nal\r\n            });\r\n        });\r\n    }\r\n\r\n}\r\n\r\nexport default SlicesReader;",
    "'use strict';\r\n\r\nfunction noop() { }\r\n\r\nconst fakeLogger = {\r\n    trace: noop,\r\n    debug: noop,\r\n    log: noop,\r\n    warn: noop,\r\n    info: noop,\r\n    error: noop\r\n};\r\n\r\nlet exportedLogger = fakeLogger;\r\n\r\n//let lastCallTime;\r\n// function formatMsgWithTimeInfo(type, msg) {\r\n//   const now = Date.now();\r\n//   const diff = lastCallTime ? '+' + (now - lastCallTime) : '0';\r\n//   lastCallTime = now;\r\n//   msg = (new Date(now)).toISOString() + ' | [' +  type + '] > ' + msg + ' ( ' + diff + ' ms )';\r\n//   return msg;\r\n// }\r\n\r\nfunction formatMsg(type, msg) {\r\n    msg = '[' + type + '] > ' + msg;\r\n    return msg;\r\n}\r\n\r\nfunction consolePrintFn(type) {\r\n    const func = window.console[type];\r\n    if (func) {\r\n        return function (...args) {\r\n            if (args[0]) {\r\n                args[0] = formatMsg(type, args[0]);\r\n            }\r\n            func.apply(window.console, args);\r\n        };\r\n    }\r\n    return noop;\r\n}\r\n\r\nfunction exportLoggerFunctions(debugConfig, ...functions) {\r\n    functions.forEach(function (type) {\r\n        exportedLogger[type] = debugConfig[type] ? debugConfig[type].bind(debugConfig) : consolePrintFn(type);\r\n    });\r\n}\r\n\r\nexport var enableLogs = function (debugConfig) {\r\n    if (debugConfig === true || typeof debugConfig === 'object') {\r\n        exportLoggerFunctions(debugConfig,\r\n            // Remove out from list here to hard-disable a log-level\r\n            //'trace',\r\n            'debug',\r\n            'log',\r\n            'info',\r\n            'warn',\r\n            'error'\r\n        );\r\n        // Some browsers don't allow to use bind on console object anyway\r\n        // fallback to default if needed\r\n        try {\r\n            exportedLogger.log();\r\n        } catch (e) {\r\n            exportedLogger = fakeLogger;\r\n        }\r\n    }\r\n    else {\r\n        exportedLogger = fakeLogger;\r\n    }\r\n};\r\n\r\nexport var logger = exportedLogger;\r\n",
    "if (typeof ArrayBuffer !== 'undefined' && !ArrayBuffer.prototype.slice) {\r\n    ArrayBuffer.prototype.slice = function (start, end) {\r\n        var that = new Uint8Array(this);\r\n        if (end === undefined) {\r\n            end = that.length;\r\n        }\r\n        var result = new ArrayBuffer(end - start);\r\n        var resultArray = new Uint8Array(result);\r\n        for (var i = 0; i < resultArray.length; i++) {\r\n            resultArray[i] = that[i + start];\r\n        }\r\n        return result;\r\n    };\r\n}\r\n",
    "/**\r\n * XHR based logger\r\n*/\r\n\r\n\r\nclass XhrLoader {\r\n\r\n    constructor(config) {\r\n        if (config && config.xhrSetup) {\r\n            this.xhrSetup = config.xhrSetup;\r\n        }\r\n    }\r\n\r\n    destroy() {\r\n        this.abort();\r\n        this.loader = null;\r\n    }\r\n\r\n    abort() {\r\n        var loader = this.loader;\r\n        if (loader && loader.readyState !== 4) {\r\n            this.stats.aborted = true;\r\n            loader.abort();\r\n        }\r\n\r\n        window.clearTimeout(this.requestTimeout);\r\n        this.requestTimeout = null;\r\n        window.clearTimeout(this.retryTimeout);\r\n        this.retryTimeout = null;\r\n    }\r\n\r\n    loadHead(context, config, callbacks) {\r\n        this.context = context;\r\n        this.config = config;\r\n        this.callbacks = callbacks;\r\n        this.stats = { trequest: performance.now(), retry: 0 };\r\n        this.retryDelay = config.retryDelay;\r\n        var xhr = new XMLHttpRequest;\r\n        xhr.open('head', context.url);\r\n        xhr.onload = function () {\r\n            callbacks.onSuccess(xhr.getResponseHeader('content-length'));\r\n        };\r\n        xhr.send();\r\n    }\r\n\r\n    load(context, config, callbacks) {\r\n        this.context = context;\r\n        this.config = config;\r\n        this.callbacks = callbacks;\r\n        this.stats = { trequest: performance.now(), retry: 0 };\r\n        this.retryDelay = config.retryDelay;\r\n        this.loadInternal();\r\n    }\r\n\r\n    loadInternal() {\r\n        var xhr, context = this.context;\r\n        if (typeof XDomainRequest !== 'undefined') {\r\n            xhr = this.loader = new XDomainRequest();\r\n        } else {\r\n            xhr = this.loader = new XMLHttpRequest();\r\n        }\r\n        xhr.onloadend = this.loadend.bind(this);\r\n        xhr.onprogress = this.loadprogress.bind(this);\r\n        xhr.open('GET', context.url, true);\r\n        if (context.rangeEnd) {\r\n            xhr.setRequestHeader('Range', 'bytes=' + context.rangeStart + '-' + (context.rangeEnd - 1));\r\n        }\r\n        xhr.responseType = context.responseType;\r\n        let stats = this.stats;\r\n        stats.tfirst = 0;\r\n        stats.loaded = 0;\r\n        if (this.xhrSetup) {\r\n            this.xhrSetup(xhr, context.url);\r\n        }\r\n        // setup timeout before we perform request\r\n        this.requestTimeout = window.setTimeout(this.loadtimeout.bind(this), this.config.timeout);\r\n        xhr.send();\r\n    }\r\n\r\n    loadend(event) {\r\n        var xhr = event.currentTarget,\r\n            status = xhr.status,\r\n            stats = this.stats,\r\n            context = this.context,\r\n            config = this.config;\r\n        // don't proceed if xhr has been aborted\r\n        if (stats.aborted) {\r\n            return;\r\n        }\r\n        // in any case clear the current xhrs timeout\r\n        window.clearTimeout(this.requestTimeout);\r\n\r\n        // http status between 200 to 299 are all successful\r\n        if (status >= 200 && status < 300) {\r\n            stats.tload = Math.max(stats.tfirst, performance.now());\r\n            let data, len;\r\n            if (context.responseType === 'arraybuffer') {\r\n                data = xhr.response;\r\n                len = data.byteLength;\r\n            } else {\r\n                data = xhr.responseText;\r\n                len = data.length;\r\n            }\r\n            stats.loaded = stats.total = len;\r\n            let response = { url: xhr.responseURL, data: data };\r\n            this.callbacks.onSuccess(response, stats, context);\r\n        } else {\r\n            // if max nb of retries reached or if http status between 400 and 499 (such error cannot be recovered, retrying is useless), return error\r\n            if (stats.retry >= config.maxRetry || (status >= 400 && status < 499)) {\r\n                //  logger.error(`${status} while loading ${context.url}` );\r\n                this.callbacks.onError({ code: status, text: xhr.statusText }, context);\r\n            } else {\r\n                // retry\r\n                //  logger.warn(`${status} while loading ${context.url}, retrying in ${this.retryDelay}...`);\r\n                // aborts and resets internal state\r\n                this.destroy();\r\n                // schedule retry\r\n                this.retryTimeout = window.setTimeout(this.loadInternal.bind(this), this.retryDelay);\r\n                // set exponential backoff\r\n                this.retryDelay = Math.min(2 * this.retryDelay, config.maxRetryDelay);\r\n                stats.retry++;\r\n            }\r\n        }\r\n    }\r\n\r\n    loadtimeout() {\r\n        //  logger.warn(`timeout while loading ${this.context.url}` );\r\n        this.callbacks.onTimeout(this.stats, this.context);\r\n    }\r\n\r\n    loadprogress(event) {\r\n        var stats = this.stats;\r\n        if (stats.tfirst === 0) {\r\n            stats.tfirst = Math.max(performance.now(), stats.trequest);\r\n        }\r\n        stats.loaded = event.loaded;\r\n        if (event.lengthComputable) {\r\n            stats.total = event.total;\r\n        }\r\n        let onProgress = this.callbacks.onProgress;\r\n        if (onProgress) {\r\n            // last args is to provide on progress data\r\n            onProgress(stats, this.context, null);\r\n        }\r\n    }\r\n}\r\n\r\nexport default XhrLoader;\r\n",
    "/**\r\n * WFS interface, Jeff Yang 2016.10\r\n */\r\n'use strict';\r\n\r\nimport Event from './events';\r\nimport FlowController from './controller/flow-controller';\r\nimport BufferController from './controller/buffer-controller';\r\nimport EventEmitter from 'events';\r\nimport XhrLoader from './utils/xhr-loader';\r\nimport WebsocketLoader from './loader/websocket-loader';\r\n\r\n\r\nclass Wfs {\r\n\r\n    static get version() {\r\n        // replaced with browserify-versionify transform\r\n        return '' + 'v.0.0.0.1';\r\n    }\r\n\r\n    static isSupported() {\r\n        return (window.MediaSource &&\r\n            typeof window.MediaSource.isTypeSupported === 'function' &&\r\n            window.MediaSource.isTypeSupported('video/mp4; codecs=\"avc1.42c01f,mp4a.40.2\"'));\r\n    }\r\n\r\n    static get Events() {\r\n        return Event;\r\n    }\r\n\r\n    static get DefaultConfig() {\r\n        if (!Wfs.defaultConfig) {\r\n            Wfs.defaultConfig = {\r\n                autoStartLoad: true,\r\n                startPosition: -1,\r\n                debug: false,\r\n                fLoader: undefined,\r\n                loader: XhrLoader,\r\n                //loader: FetchLoader,\r\n                fmp4FileUrl: 'xxxx.mp4',\r\n                fragLoadingTimeOut: 20000,\r\n                fragLoadingMaxRetry: 6,\r\n                fragLoadingRetryDelay: 1000,\r\n                fragLoadingMaxRetryTimeout: 64000,\r\n                fragLoadingLoopThreshold: 1,\r\n                forceKeyFrameOnDiscontinuity: true,\r\n                appendErrorMaxRetry: 3\r\n            };\r\n        }\r\n        return Wfs.defaultConfig;\r\n    }\r\n\r\n    static set DefaultConfig(defaultConfig) {\r\n        Wfs.defaultConfig = defaultConfig;\r\n    }\r\n\r\n    constructor(config = {}) {\r\n\r\n        var defaultConfig = Wfs.DefaultConfig;\r\n        for (var prop in defaultConfig) {\r\n            if (prop in config) { continue; }\r\n            config[prop] = defaultConfig[prop];\r\n        }\r\n        this.config = config;\r\n        // observer setup\r\n        var observer = this.observer = new EventEmitter();\r\n        observer.trigger = function trigger(event, ...data) {\r\n            observer.emit(event, event, ...data);\r\n        };\r\n\r\n        observer.off = function off(event, ...data) {\r\n            observer.removeListener(event, ...data);\r\n        };\r\n        this.on = observer.on.bind(observer);\r\n        this.off = observer.off.bind(observer);\r\n        this.trigger = observer.trigger.bind(observer);\r\n\r\n        this.flowController = new FlowController(this);\r\n        this.bufferController = new BufferController(this);\r\n        //  this.fileLoader = new FileLoader(this);\r\n        this.websocketLoader = new WebsocketLoader(this);\r\n        this.mediaType = undefined;\r\n    }\r\n\r\n    destroy() {\r\n        this.flowController.destroy();\r\n        this.bufferController.destroy();\r\n        //   this.fileLoader.destroy();\r\n        this.websocketLoader.destroy();\r\n    }\r\n\r\n    attachMedia(media, channelName = 'chX', mediaType = 'H264Raw', websocketName = 'play2', websocketDomain) { // 'H264Raw' 'FMp4'    \r\n        this.mediaType = mediaType;\r\n        this.media = media;\r\n        this.trigger(Event.MEDIA_ATTACHING, { media: media, channelName: channelName, mediaType: mediaType, websocketName: websocketName, websocketDomain: websocketDomain });\r\n    }\r\n\r\n    attachWebsocket(websocket, channelName) {\r\n        this.trigger(Event.WEBSOCKET_ATTACHING, { websocket: websocket, mediaType: this.mediaType, channelName: channelName });\r\n    }\r\n\r\n}\r\n\r\nexport default Wfs;\r\n"
  ]
}